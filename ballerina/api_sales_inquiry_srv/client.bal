// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2024, WSO2 LLC. (http://www.wso2.org).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/http;

# The service contains header, header partner, header pricing element, item, item partner, and item pricing element entities. You can retrieve all existing data or apply filters.
public isolated client class Client {
    final http:Client clientEp;
    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string serviceUrl) returns error? {
        http:ClientConfiguration httpClientConfig = {auth: config.auth, httpVersion: config.httpVersion, timeout: config.timeout, forwarded: config.forwarded, poolConfig: config.poolConfig, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, validation: config.validation};
        do {
            if config.http1Settings is ClientHttp1Settings {
                ClientHttp1Settings settings = check config.http1Settings.ensureType(ClientHttp1Settings);
                httpClientConfig.http1Settings = {...settings};
            }
            if config.http2Settings is http:ClientHttp2Settings {
                httpClientConfig.http2Settings = check config.http2Settings.ensureType(http:ClientHttp2Settings);
            }
            if config.cache is http:CacheConfig {
                httpClientConfig.cache = check config.cache.ensureType(http:CacheConfig);
            }
            if config.responseLimits is http:ResponseLimitConfigs {
                httpClientConfig.responseLimits = check config.responseLimits.ensureType(http:ResponseLimitConfigs);
            }
            if config.secureSocket is http:ClientSecureSocket {
                httpClientConfig.secureSocket = check config.secureSocket.ensureType(http:ClientSecureSocket);
            }
            if config.proxy is http:ProxyConfig {
                httpClientConfig.proxy = check config.proxy.ensureType(http:ProxyConfig);
            }
        }
        http:Client httpEp = check new (serviceUrl, httpClientConfig);
        self.clientEp = httpEp;
        return;
    }

    # Reads a specific sales inquiry header.
    #
    # + SalesInquiry - Sales Inquiry
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_SalesInquiry(string SalesInquiry, map<string|string[]> headers = {}, *GetA_SalesInquiryQueries queries) returns A_SalesInquiryWrapper|error {
        string resourcePath = string `/A_SalesInquiry('${getEncodedUri(SalesInquiry)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads a specific sales inquiry item.
    #
    # + SalesInquiry - Sales Inquiry
    # + SalesInquiryItem - Sales Inquiry Item
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_SalesInquiryItem(string SalesInquiry, string SalesInquiryItem, map<string|string[]> headers = {}, *GetA_SalesInquiryItemQueries queries) returns A_SalesInquiryItemWrapper|error {
        string resourcePath = string `/A_SalesInquiryItem(SalesInquiry='${getEncodedUri(SalesInquiry)}',SalesInquiryItem='${getEncodedUri(SalesInquiryItem)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads a specific item-level business partner.
    #
    # + SalesInquiry - Sales and Distribution Document Number
    # + SalesInquiryItem - Item number of the SD document
    # + PartnerFunction - Partner Function
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_SalesInquiryItemPartner(string SalesInquiry, string SalesInquiryItem, string PartnerFunction, map<string|string[]> headers = {}, *GetA_SalesInquiryItemPartnerQueries queries) returns A_SalesInquiryItemPartnerWrapper|error {
        string resourcePath = string `/A_SalesInquiryItemPartner(SalesInquiry='${getEncodedUri(SalesInquiry)}',SalesInquiryItem='${getEncodedUri(SalesInquiryItem)}',PartnerFunction='${getEncodedUri(PartnerFunction)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads a specific item-level pricing element.
    #
    # + SalesInquiry - Sales Document
    # + SalesInquiryItem - Condition item number
    # + PricingProcedureStep - Step Number
    # + PricingProcedureCounter - Condition Counter
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_SalesInquiryItemPrcgElmnt(string SalesInquiry, string SalesInquiryItem, string PricingProcedureStep, string PricingProcedureCounter, map<string|string[]> headers = {}, *GetA_SalesInquiryItemPrcgElmntQueries queries) returns A_SalesInquiryItemPrcgElmntWrapper|error {
        string resourcePath = string `/A_SalesInquiryItemPrcgElmnt(SalesInquiry='${getEncodedUri(SalesInquiry)}',SalesInquiryItem='${getEncodedUri(SalesInquiryItem)}',PricingProcedureStep='${getEncodedUri(PricingProcedureStep)}',PricingProcedureCounter='${getEncodedUri(PricingProcedureCounter)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads a specific header-level business partner.
    #
    # + SalesInquiry - Sales and Distribution Document Number
    # + PartnerFunction - Partner Function
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_SalesInquiryPartner(string SalesInquiry, string PartnerFunction, map<string|string[]> headers = {}, *GetA_SalesInquiryPartnerQueries queries) returns A_SalesInquiryPartnerWrapper|error {
        string resourcePath = string `/A_SalesInquiryPartner(SalesInquiry='${getEncodedUri(SalesInquiry)}',PartnerFunction='${getEncodedUri(PartnerFunction)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads a specific header-level pricing element.
    #
    # + SalesInquiry - Sales Document
    # + PricingProcedureStep - Step Number
    # + PricingProcedureCounter - Condition Counter
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_SalesInquiryPrcgElmnt(string SalesInquiry, string PricingProcedureStep, string PricingProcedureCounter, map<string|string[]> headers = {}, *GetA_SalesInquiryPrcgElmntQueries queries) returns A_SalesInquiryPrcgElmntWrapper|error {
        string resourcePath = string `/A_SalesInquiryPrcgElmnt(SalesInquiry='${getEncodedUri(SalesInquiry)}',PricingProcedureStep='${getEncodedUri(PricingProcedureStep)}',PricingProcedureCounter='${getEncodedUri(PricingProcedureCounter)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales inquiry item for a specific item partner.
    #
    # + SalesInquiry - Sales and Distribution Document Number
    # + SalesInquiryItem - Item number of the SD document
    # + PartnerFunction - Partner Function
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesInquiryItemOfA_SalesInquiryItemPartner(string SalesInquiry, string SalesInquiryItem, string PartnerFunction, map<string|string[]> headers = {}, *GetSalesInquiryItemOfA_SalesInquiryItemPartnerQueries queries) returns A_SalesInquiryItemWrapper|error {
        string resourcePath = string `/A_SalesInquiryItemPartner(SalesInquiry='${getEncodedUri(SalesInquiry)}',SalesInquiryItem='${getEncodedUri(SalesInquiryItem)}',PartnerFunction='${getEncodedUri(PartnerFunction)}')/to_SalesInquiryItem`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales inquiry item for a specific item pricing element.
    #
    # + SalesInquiry - Sales Document
    # + SalesInquiryItem - Condition item number
    # + PricingProcedureStep - Step Number
    # + PricingProcedureCounter - Condition Counter
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesInquiryItemOfA_SalesInquiryItemPrcgElmnt(string SalesInquiry, string SalesInquiryItem, string PricingProcedureStep, string PricingProcedureCounter, map<string|string[]> headers = {}, *GetSalesInquiryItemOfA_SalesInquiryItemPrcgElmntQueries queries) returns A_SalesInquiryItemWrapper|error {
        string resourcePath = string `/A_SalesInquiryItemPrcgElmnt(SalesInquiry='${getEncodedUri(SalesInquiry)}',SalesInquiryItem='${getEncodedUri(SalesInquiryItem)}',PricingProcedureStep='${getEncodedUri(PricingProcedureStep)}',PricingProcedureCounter='${getEncodedUri(PricingProcedureCounter)}')/to_SalesInquiryItem`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales inquiry header for a specific item.
    #
    # + SalesInquiry - Sales Inquiry
    # + SalesInquiryItem - Sales Inquiry Item
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesInquiryOfA_SalesInquiryItem(string SalesInquiry, string SalesInquiryItem, map<string|string[]> headers = {}, *GetSalesInquiryOfA_SalesInquiryItemQueries queries) returns A_SalesInquiryWrapper|error {
        string resourcePath = string `/A_SalesInquiryItem(SalesInquiry='${getEncodedUri(SalesInquiry)}',SalesInquiryItem='${getEncodedUri(SalesInquiryItem)}')/to_SalesInquiry`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales inquiry header for a specific item partner.
    #
    # + SalesInquiry - Sales and Distribution Document Number
    # + SalesInquiryItem - Item number of the SD document
    # + PartnerFunction - Partner Function
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesInquiryOfA_SalesInquiryItemPartner(string SalesInquiry, string SalesInquiryItem, string PartnerFunction, map<string|string[]> headers = {}, *GetSalesInquiryOfA_SalesInquiryItemPartnerQueries queries) returns A_SalesInquiryWrapper|error {
        string resourcePath = string `/A_SalesInquiryItemPartner(SalesInquiry='${getEncodedUri(SalesInquiry)}',SalesInquiryItem='${getEncodedUri(SalesInquiryItem)}',PartnerFunction='${getEncodedUri(PartnerFunction)}')/to_SalesInquiry`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales inquiry header for a specific item pricing element.
    #
    # + SalesInquiry - Sales Document
    # + SalesInquiryItem - Condition item number
    # + PricingProcedureStep - Step Number
    # + PricingProcedureCounter - Condition Counter
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesInquiryOfA_SalesInquiryItemPrcgElmnt(string SalesInquiry, string SalesInquiryItem, string PricingProcedureStep, string PricingProcedureCounter, map<string|string[]> headers = {}, *GetSalesInquiryOfA_SalesInquiryItemPrcgElmntQueries queries) returns A_SalesInquiryWrapper|error {
        string resourcePath = string `/A_SalesInquiryItemPrcgElmnt(SalesInquiry='${getEncodedUri(SalesInquiry)}',SalesInquiryItem='${getEncodedUri(SalesInquiryItem)}',PricingProcedureStep='${getEncodedUri(PricingProcedureStep)}',PricingProcedureCounter='${getEncodedUri(PricingProcedureCounter)}')/to_SalesInquiry`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales inquiry header for a specific header partner.
    #
    # + SalesInquiry - Sales and Distribution Document Number
    # + PartnerFunction - Partner Function
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesInquiryOfA_SalesInquiryPartner(string SalesInquiry, string PartnerFunction, map<string|string[]> headers = {}, *GetSalesInquiryOfA_SalesInquiryPartnerQueries queries) returns A_SalesInquiryWrapper|error {
        string resourcePath = string `/A_SalesInquiryPartner(SalesInquiry='${getEncodedUri(SalesInquiry)}',PartnerFunction='${getEncodedUri(PartnerFunction)}')/to_SalesInquiry`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales inquiry header for a specific header pricing element.
    #
    # + SalesInquiry - Sales Document
    # + PricingProcedureStep - Step Number
    # + PricingProcedureCounter - Condition Counter
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesInquiryOfA_SalesInquiryPrcgElmnt(string SalesInquiry, string PricingProcedureStep, string PricingProcedureCounter, map<string|string[]> headers = {}, *GetSalesInquiryOfA_SalesInquiryPrcgElmntQueries queries) returns A_SalesInquiryWrapper|error {
        string resourcePath = string `/A_SalesInquiryPrcgElmnt(SalesInquiry='${getEncodedUri(SalesInquiry)}',PricingProcedureStep='${getEncodedUri(PricingProcedureStep)}',PricingProcedureCounter='${getEncodedUri(PricingProcedureCounter)}')/to_SalesInquiry`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads all sales inquiry headers.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_SalesInquiries(map<string|string[]> headers = {}, *ListA_SalesInquiriesQueries queries) returns CollectionOfA_SalesInquiryWrapper|error {
        string resourcePath = string `/A_SalesInquiry`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the item-level business partners of all sales inquiry items.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_SalesInquiryItemPartners(map<string|string[]> headers = {}, *ListA_SalesInquiryItemPartnersQueries queries) returns CollectionOfA_SalesInquiryItemPartnerWrapper|error {
        string resourcePath = string `/A_SalesInquiryItemPartner`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the item-level pricing elements of all sales inquiry items.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_SalesInquiryItemPrcgElmnts(map<string|string[]> headers = {}, *ListA_SalesInquiryItemPrcgElmntsQueries queries) returns CollectionOfA_SalesInquiryItemPrcgElmntWrapper|error {
        string resourcePath = string `/A_SalesInquiryItemPrcgElmnt`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads all sales inquiry items.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_SalesInquiryItems(map<string|string[]> headers = {}, *ListA_SalesInquiryItemsQueries queries) returns CollectionOfA_SalesInquiryItemWrapper|error {
        string resourcePath = string `/A_SalesInquiryItem`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the header-level business partners of all sales inquiries.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_SalesInquiryPartners(map<string|string[]> headers = {}, *ListA_SalesInquiryPartnersQueries queries) returns CollectionOfA_SalesInquiryPartnerWrapper|error {
        string resourcePath = string `/A_SalesInquiryPartner`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the header-level pricing elements of all sales inquiries.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_SalesInquiryPrcgElmnts(map<string|string[]> headers = {}, *ListA_SalesInquiryPrcgElmntsQueries queries) returns CollectionOfA_SalesInquiryPrcgElmntWrapper|error {
        string resourcePath = string `/A_SalesInquiryPrcgElmnt`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads all items of a specific sales inquiry.
    #
    # + SalesInquiry - Sales Inquiry
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listItemsOfA_SalesInquiry(string SalesInquiry, map<string|string[]> headers = {}, *ListItemsOfA_SalesInquiryQueries queries) returns CollectionOfA_SalesInquiryItemWrapper|error {
        string resourcePath = string `/A_SalesInquiry('${getEncodedUri(SalesInquiry)}')/to_Item`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the header-level business partners of a specific sales inquiry.
    #
    # + SalesInquiry - Sales Inquiry
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPartnersOfA_SalesInquiry(string SalesInquiry, map<string|string[]> headers = {}, *ListPartnersOfA_SalesInquiryQueries queries) returns CollectionOfA_SalesInquiryPartnerWrapper|error {
        string resourcePath = string `/A_SalesInquiry('${getEncodedUri(SalesInquiry)}')/to_Partner`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the item-level business partners of a specific sales inquiry item.
    #
    # + SalesInquiry - Sales Inquiry
    # + SalesInquiryItem - Sales Inquiry Item
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPartnersOfA_SalesInquiryItem(string SalesInquiry, string SalesInquiryItem, map<string|string[]> headers = {}, *ListPartnersOfA_SalesInquiryItemQueries queries) returns CollectionOfA_SalesInquiryItemPartnerWrapper|error {
        string resourcePath = string `/A_SalesInquiryItem(SalesInquiry='${getEncodedUri(SalesInquiry)}',SalesInquiryItem='${getEncodedUri(SalesInquiryItem)}')/to_Partner`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the header-level pricing elements of a specific sales inquiry.
    #
    # + SalesInquiry - Sales Inquiry
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPricingElementsOfA_SalesInquiry(string SalesInquiry, map<string|string[]> headers = {}, *ListPricingElementsOfA_SalesInquiryQueries queries) returns CollectionOfA_SalesInquiryPrcgElmntWrapper|error {
        string resourcePath = string `/A_SalesInquiry('${getEncodedUri(SalesInquiry)}')/to_PricingElement`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the item-level pricing elements of a specific sales inquiry item.
    #
    # + SalesInquiry - Sales Inquiry
    # + SalesInquiryItem - Sales Inquiry Item
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPricingElementsOfA_SalesInquiryItem(string SalesInquiry, string SalesInquiryItem, map<string|string[]> headers = {}, *ListPricingElementsOfA_SalesInquiryItemQueries queries) returns CollectionOfA_SalesInquiryItemPrcgElmntWrapper|error {
        string resourcePath = string `/A_SalesInquiryItem(SalesInquiry='${getEncodedUri(SalesInquiry)}',SalesInquiryItem='${getEncodedUri(SalesInquiryItem)}')/to_PricingElement`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Send a group of requests
    #
    # + headers - Headers to be sent with the request 
    # + request - Batch request 
    # + return - Batch response 
    remote isolated function performBatchOperation(http:Request request, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/$batch`;
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, headers);
    }
}
