// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2024, WSO2 LLC. (http://www.wso2.org).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/http;
import ballerinax/sap;

# The API gives you information about pricing, material availability, and the customer's credit limit. The response is provided synchronously. The simulated sales order is not saved.
public isolated client class Client {
    final sap:Client clientEp;

    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string hostname, int port = 443) returns error? {
        string serviceUrl = string `https://${hostname}:${port}/sap/opu/odata/sap/API_SALES_ORDER_SIMULATION_SRV`;
        http:ClientConfiguration httpClientConfig = {auth: config.auth, httpVersion: config.httpVersion, timeout: config.timeout, forwarded: config.forwarded, poolConfig: config.poolConfig, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, validation: config.validation};
        do {
            if config.http1Settings is ClientHttp1Settings {
                ClientHttp1Settings settings = check config.http1Settings.ensureType(ClientHttp1Settings);
                httpClientConfig.http1Settings = {...settings};
            }
            if config.http2Settings is http:ClientHttp2Settings {
                httpClientConfig.http2Settings = check config.http2Settings.ensureType(http:ClientHttp2Settings);
            }
            if config.cache is http:CacheConfig {
                httpClientConfig.cache = check config.cache.ensureType(http:CacheConfig);
            }
            if config.responseLimits is http:ResponseLimitConfigs {
                httpClientConfig.responseLimits = check config.responseLimits.ensureType(http:ResponseLimitConfigs);
            }
            if config.secureSocket is http:ClientSecureSocket {
                httpClientConfig.secureSocket = check config.secureSocket.ensureType(http:ClientSecureSocket);
            }
            if config.proxy is http:ProxyConfig {
                httpClientConfig.proxy = check config.proxy.ensureType(http:ProxyConfig);
            }
        }
        sap:Client httpEp = check new (serviceUrl, httpClientConfig);
        self.clientEp = httpEp;
        return;
    }

    # Simulates the creation of a sales order.
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createA_SalesOrderSimulation(CreateA_SalesOrderSimulation payload, map<string|string[]> headers = {}) returns A_SalesOrderSimulationWrapper|error {
        string resourcePath = string `/A_SalesOrderSimulation`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Add new entity to A_SlsOrdSimlnValAddedSrvc
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createA_SlsOrdSimlnValAddedSrvc(CreateA_SlsOrdSimlnValAddedSrvc payload, map<string|string[]> headers = {}) returns A_SlsOrdSimlnValAddedSrvcWrapper|error {
        string resourcePath = string `/A_SlsOrdSimlnValAddedSrvc`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Delete entity from A_SlsOrdSimlnValAddedSrvc
    #
    # + ValueAddedServiceType - VAS Service Types
    # + ValueAddedSubServiceType - VAS Sub Services
    # + SalesOrder - Document Number of Reference Document
    # + SalesOrderItem - Item Number of the Reference Item
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteA_SlsOrdSimlnValAddedSrvc(string ValueAddedServiceType, string ValueAddedSubServiceType, string SalesOrder, string SalesOrderItem, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_SlsOrdSimlnValAddedSrvc(ValueAddedServiceType='${getEncodedUri(ValueAddedServiceType)}',ValueAddedSubServiceType='${getEncodedUri(ValueAddedSubServiceType)}',SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}')`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get entity from A_SlsOrdSimlnValAddedSrvc by key
    #
    # + ValueAddedServiceType - VAS Service Types
    # + ValueAddedSubServiceType - VAS Sub Services
    # + SalesOrder - Document Number of Reference Document
    # + SalesOrderItem - Item Number of the Reference Item
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_SlsOrdSimlnValAddedSrvc(string ValueAddedServiceType, string ValueAddedSubServiceType, string SalesOrder, string SalesOrderItem, map<string|string[]> headers = {}, *GetA_SlsOrdSimlnValAddedSrvcQueries queries) returns A_SlsOrdSimlnValAddedSrvcWrapper|error {
        string resourcePath = string `/A_SlsOrdSimlnValAddedSrvc(ValueAddedServiceType='${getEncodedUri(ValueAddedServiceType)}',ValueAddedSubServiceType='${getEncodedUri(ValueAddedSubServiceType)}',SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from A_SlsOrdSimlnValAddedSrvc
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_SlsOrdSimlnValAddedSrvcs(map<string|string[]> headers = {}, *ListA_SlsOrdSimlnValAddedSrvcsQueries queries) returns CollectionOfA_SlsOrdSimlnValAddedSrvcWrapper|error {
        string resourcePath = string `/A_SlsOrdSimlnValAddedSrvc`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in A_SlsOrdSimlnValAddedSrvc
    #
    # + ValueAddedServiceType - VAS Service Types
    # + ValueAddedSubServiceType - VAS Sub Services
    # + SalesOrder - Document Number of Reference Document
    # + SalesOrderItem - Item Number of the Reference Item
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_SlsOrdSimlnValAddedSrvc(string ValueAddedServiceType, string ValueAddedSubServiceType, string SalesOrder, string SalesOrderItem, Modified\ A_SlsOrdSimlnValAddedSrvcType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_SlsOrdSimlnValAddedSrvc(ValueAddedServiceType='${getEncodedUri(ValueAddedServiceType)}',ValueAddedSubServiceType='${getEncodedUri(ValueAddedSubServiceType)}',SalesOrder='${getEncodedUri(SalesOrder)}',SalesOrderItem='${getEncodedUri(SalesOrderItem)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Send a group of requests
    #
    # + headers - Headers to be sent with the request 
    # + request - Batch request 
    # + return - Batch response 
    remote isolated function performBatchOperation(http:Request request, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/$batch`;
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, headers);
    }
}
