// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2024, WSO2 LLC. (http://www.wso2.org).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/http;

# The OData service enables external systems and other consumers to retrieve Incoterms data in your system. Retrievable details include Incoterms and Incoterms versions.
public isolated client class Client {
    final http:Client clientEp;
    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string serviceUrl) returns error? {
        http:ClientConfiguration httpClientConfig = {auth: config.auth, httpVersion: config.httpVersion, timeout: config.timeout, forwarded: config.forwarded, poolConfig: config.poolConfig, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, validation: config.validation};
        do {
            if config.http1Settings is ClientHttp1Settings {
                ClientHttp1Settings settings = check config.http1Settings.ensureType(ClientHttp1Settings);
                httpClientConfig.http1Settings = {...settings};
            }
            if config.http2Settings is http:ClientHttp2Settings {
                httpClientConfig.http2Settings = check config.http2Settings.ensureType(http:ClientHttp2Settings);
            }
            if config.cache is http:CacheConfig {
                httpClientConfig.cache = check config.cache.ensureType(http:CacheConfig);
            }
            if config.responseLimits is http:ResponseLimitConfigs {
                httpClientConfig.responseLimits = check config.responseLimits.ensureType(http:ResponseLimitConfigs);
            }
            if config.secureSocket is http:ClientSecureSocket {
                httpClientConfig.secureSocket = check config.secureSocket.ensureType(http:ClientSecureSocket);
            }
            if config.proxy is http:ProxyConfig {
                httpClientConfig.proxy = check config.proxy.ensureType(http:ProxyConfig);
            }
        }
        http:Client httpEp = check new (serviceUrl, httpClientConfig);
        self.clientEp = httpEp;
        return;
    }

    # Reads the ID and description of a specific Incoterm.
    #
    # + IncotermsClassification - Incoterms (Part 1)
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_IncotermsClassification(string IncotermsClassification, map<string|string[]> headers = {}, *GetA_IncotermsClassificationQueries queries) returns A_IncotermsClassificationWrapper|error {
        string resourcePath = string `/A_IncotermsClassification('${getEncodedUri(IncotermsClassification)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the description of a specific Incoterm in a specific language.
    #
    # + IncotermsClassification - Incoterms (Part 1)
    # + Language - Language Key
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_IncotermsClassificationText(string IncotermsClassification, string Language, map<string|string[]> headers = {}, *GetA_IncotermsClassificationTextQueries queries) returns A_IncotermsClassificationTextWrapper|error {
        string resourcePath = string `/A_IncotermsClassificationText(IncotermsClassification='${getEncodedUri(IncotermsClassification)}',Language='${getEncodedUri(Language)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the ID and description of a specific Incoterms version.
    #
    # + IncotermsVersion - Incoterms Version
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_IncotermsVersion(string IncotermsVersion, map<string|string[]> headers = {}, *GetA_IncotermsVersionQueries queries) returns A_IncotermsVersionWrapper|error {
        string resourcePath = string `/A_IncotermsVersion('${getEncodedUri(IncotermsVersion)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the description of a specific Incoterms version in a specific language.
    #
    # + IncotermsVersion - Incoterms Version
    # + Language - Language Key
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_IncotermsVersionText(string IncotermsVersion, string Language, map<string|string[]> headers = {}, *GetA_IncotermsVersionTextQueries queries) returns A_IncotermsVersionTextWrapper|error {
        string resourcePath = string `/A_IncotermsVersionText(IncotermsVersion='${getEncodedUri(IncotermsVersion)}',Language='${getEncodedUri(Language)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the descriptions of all Incoterms.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_IncotermsClassificationTexts(map<string|string[]> headers = {}, *ListA_IncotermsClassificationTextsQueries queries) returns CollectionOfA_IncotermsClassificationTextWrapper|error {
        string resourcePath = string `/A_IncotermsClassificationText`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the IDs and descriptions of all Incoterms.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_IncotermsClassifications(map<string|string[]> headers = {}, *ListA_IncotermsClassificationsQueries queries) returns CollectionOfA_IncotermsClassificationWrapper|error {
        string resourcePath = string `/A_IncotermsClassification`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the descriptions of all Incoterms versions.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_IncotermsVersionTexts(map<string|string[]> headers = {}, *ListA_IncotermsVersionTextsQueries queries) returns CollectionOfA_IncotermsVersionTextWrapper|error {
        string resourcePath = string `/A_IncotermsVersionText`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the IDs and descriptions of all Incoterms versions.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_IncotermsVersions(map<string|string[]> headers = {}, *ListA_IncotermsVersionsQueries queries) returns CollectionOfA_IncotermsVersionWrapper|error {
        string resourcePath = string `/A_IncotermsVersion`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the description of a specific Incoterm.
    #
    # + IncotermsClassification - Incoterms (Part 1)
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listIncotermsClassificationTextsOfA_IncotermsClassification(string IncotermsClassification, map<string|string[]> headers = {}, *ListIncotermsClassificationTextsOfA_IncotermsClassificationQueries queries) returns CollectionOfA_IncotermsClassificationTextWrapper|error {
        string resourcePath = string `/A_IncotermsClassification('${getEncodedUri(IncotermsClassification)}')/to_IncotermsClassificationText`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the description of a specific Incoterms version.
    #
    # + IncotermsVersion - Incoterms Version
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listIncotermsVersionTextsOfA_IncotermsVersion(string IncotermsVersion, map<string|string[]> headers = {}, *ListIncotermsVersionTextsOfA_IncotermsVersionQueries queries) returns CollectionOfA_IncotermsVersionTextWrapper|error {
        string resourcePath = string `/A_IncotermsVersion('${getEncodedUri(IncotermsVersion)}')/to_IncotermsVersionText`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Send a group of requests
    #
    # + headers - Headers to be sent with the request 
    # + request - Batch request 
    # + return - Batch response 
    remote isolated function performBatchOperation(http:Request request, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/$batch`;
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, headers);
    }
}
