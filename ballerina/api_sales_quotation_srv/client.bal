// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2024, WSO2 LLC. (http://www.wso2.org).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/http;
import ballerinax/sap;

# In every API call, you can make use of the following operations:
#  - You can read entire sales quotations or only parts of the data, using the provided filters.
#  - You can create sales quotations. You can use “deep insert” requests to create a header together with one or more related entities (for example, header partners or items).
#  - For existing sales quotations, you can create new items. You can use “deep insert” requests to create an item together with one or more related entities (for example, item partners).
#  - For existing sales quotations, you can update the header, header partner, header pricing element, header text, item, item partner, item pricing element, and item text.
#  - For existing sales quotations, you can delete the header, header partner, header pricing element, header text, header related object, item, item partner, item pricing element, item text, and item related object.
#  - You can accept or deny approval requests for sales quotations that cannot be processed without the consent of an approver.
public isolated client class Client {
    final sap:Client clientEp;

    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string hostname, int port = 443) returns error? {
        string serviceUrl = string `https://${hostname}:${port}/sap/opu/odata/sap/API_SALES_QUOTATION_SRV`;
        http:ClientConfiguration httpClientConfig = {auth: config.auth, httpVersion: config.httpVersion, timeout: config.timeout, forwarded: config.forwarded, poolConfig: config.poolConfig, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, validation: config.validation};
        do {
            if config.http1Settings is ClientHttp1Settings {
                ClientHttp1Settings settings = check config.http1Settings.ensureType(ClientHttp1Settings);
                httpClientConfig.http1Settings = {...settings};
            }
            if config.http2Settings is http:ClientHttp2Settings {
                httpClientConfig.http2Settings = check config.http2Settings.ensureType(http:ClientHttp2Settings);
            }
            if config.cache is http:CacheConfig {
                httpClientConfig.cache = check config.cache.ensureType(http:CacheConfig);
            }
            if config.responseLimits is http:ResponseLimitConfigs {
                httpClientConfig.responseLimits = check config.responseLimits.ensureType(http:ResponseLimitConfigs);
            }
            if config.secureSocket is http:ClientSecureSocket {
                httpClientConfig.secureSocket = check config.secureSocket.ensureType(http:ClientSecureSocket);
            }
            if config.proxy is http:ProxyConfig {
                httpClientConfig.proxy = check config.proxy.ensureType(http:ProxyConfig);
            }
        }
        sap:Client httpEp = check new (serviceUrl, httpClientConfig);
        self.clientEp = httpEp;
        return;
    }

    # Creates a sales quotation.
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createA_SalesQuotation(CreateA_SalesQuotation payload, map<string|string[]> headers = {}) returns A_SalesQuotationWrapper|error {
        string resourcePath = string `/A_SalesQuotation`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a sales quotation item.
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createA_SalesQuotationItem(CreateA_SalesQuotationItem payload, map<string|string[]> headers = {}) returns A_SalesQuotationItemWrapper|error {
        string resourcePath = string `/A_SalesQuotationItem`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a related object for a sales quotation.
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createA_SalesQuotationRelatedObject(CreateA_SalesQuotationRelatedObject payload, map<string|string[]> headers = {}) returns A_SalesQuotationRelatedObjectWrapper|error {
        string resourcePath = string `/A_SalesQuotationRelatedObject`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a related object for a sales quotation item.
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createA_SlsQtanItemRelatedObject(CreateA_SlsQtanItemRelatedObject payload, map<string|string[]> headers = {}) returns A_SlsQtanItemRelatedObjectWrapper|error {
        string resourcePath = string `/A_SlsQtanItemRelatedObject`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a sales quotation item for a specific sales quotation.
    #
    # + SalesQuotation - Sales Quotation
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createItemOfA_SalesQuotation(string SalesQuotation, CreateA_SalesQuotationItem payload, map<string|string[]> headers = {}) returns A_SalesQuotationItemWrapper|error {
        string resourcePath = string `/A_SalesQuotation('${getEncodedUri(SalesQuotation)}')/to_Item`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates related objects for a sales quotation.
    #
    # + SalesQuotation - Sales Quotation
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createRelatedObjectOfA_SalesQuotation(string SalesQuotation, CreateA_SalesQuotationRelatedObject payload, map<string|string[]> headers = {}) returns A_SalesQuotationRelatedObjectWrapper|error {
        string resourcePath = string `/A_SalesQuotation('${getEncodedUri(SalesQuotation)}')/to_RelatedObject`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates related objects for a sales quotation item.
    #
    # + SalesQuotation - Sales Quotation
    # + SalesQuotationItem - Sales Quotation Item
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createRelatedObjectOfA_SalesQuotationItem(string SalesQuotation, string SalesQuotationItem, CreateA_SlsQtanItemRelatedObject payload, map<string|string[]> headers = {}) returns A_SlsQtanItemRelatedObjectWrapper|error {
        string resourcePath = string `/A_SalesQuotationItem(SalesQuotation='${getEncodedUri(SalesQuotation)}',SalesQuotationItem='${getEncodedUri(SalesQuotationItem)}')/to_RelatedObject`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Deletes a specific sales quotation.
    #
    # + SalesQuotation - Sales Quotation
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteA_SalesQuotation(string SalesQuotation, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_SalesQuotation('${getEncodedUri(SalesQuotation)}')`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Deletes a specific sales quotation item.
    #
    # + SalesQuotation - Sales Quotation
    # + SalesQuotationItem - Sales Quotation Item
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteA_SalesQuotationItem(string SalesQuotation, string SalesQuotationItem, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_SalesQuotationItem(SalesQuotation='${getEncodedUri(SalesQuotation)}',SalesQuotationItem='${getEncodedUri(SalesQuotationItem)}')`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Deletes the item partners of a specific item and with a specific partner function in a specific sales quotation.
    #
    # + SalesQuotation - Sales and Distribution Document Number
    # + SalesQuotationItem - Item number of the SD document
    # + PartnerFunction - Partner Function
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteA_SalesQuotationItemPartner(string SalesQuotation, string SalesQuotationItem, string PartnerFunction, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_SalesQuotationItemPartner(SalesQuotation='${getEncodedUri(SalesQuotation)}',SalesQuotationItem='${getEncodedUri(SalesQuotationItem)}',PartnerFunction='${getEncodedUri(PartnerFunction)}')`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Deletes an item pricing element.
    #
    # + SalesQuotation - Sales Document
    # + SalesQuotationItem - Condition item number
    # + PricingProcedureStep - Step Number
    # + PricingProcedureCounter - Condition Counter
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteA_SalesQuotationItemPrcgElmnt(string SalesQuotation, string SalesQuotationItem, string PricingProcedureStep, string PricingProcedureCounter, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_SalesQuotationItemPrcgElmnt(SalesQuotation='${getEncodedUri(SalesQuotation)}',SalesQuotationItem='${getEncodedUri(SalesQuotationItem)}',PricingProcedureStep='${getEncodedUri(PricingProcedureStep)}',PricingProcedureCounter='${getEncodedUri(PricingProcedureCounter)}')`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Deletes a specific item text.
    #
    # + SalesQuotation - Sales Quotation
    # + SalesQuotationItem - Sales Quotation Item
    # + Language - Language Key
    # + LongTextID - Text ID
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteA_SalesQuotationItemText(string SalesQuotation, string SalesQuotationItem, string Language, string LongTextID, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_SalesQuotationItemText(SalesQuotation='${getEncodedUri(SalesQuotation)}',SalesQuotationItem='${getEncodedUri(SalesQuotationItem)}',Language='${getEncodedUri(Language)}',LongTextID='${getEncodedUri(LongTextID)}')`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Deletes the header partners of a specific sales quotation and with a specific partner function.
    #
    # + SalesQuotation - Sales and Distribution Document Number
    # + PartnerFunction - Partner Function
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteA_SalesQuotationPartner(string SalesQuotation, string PartnerFunction, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_SalesQuotationPartner(SalesQuotation='${getEncodedUri(SalesQuotation)}',PartnerFunction='${getEncodedUri(PartnerFunction)}')`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Deletes a header pricing element for a specific sales quotation.
    #
    # + SalesQuotation - Sales Document
    # + PricingProcedureStep - Step Number
    # + PricingProcedureCounter - Condition Counter
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteA_SalesQuotationPrcgElmnt(string SalesQuotation, string PricingProcedureStep, string PricingProcedureCounter, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_SalesQuotationPrcgElmnt(SalesQuotation='${getEncodedUri(SalesQuotation)}',PricingProcedureStep='${getEncodedUri(PricingProcedureStep)}',PricingProcedureCounter='${getEncodedUri(PricingProcedureCounter)}')`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Deletes a related object from a sales quotation.
    #
    # + SalesQuotation - Sales Quotation
    # + SDDocRelatedObjectSequenceNmbr - Sequence Number of the Related Object of an SD Document
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteA_SalesQuotationRelatedObject(string SalesQuotation, string SDDocRelatedObjectSequenceNmbr, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_SalesQuotationRelatedObject(SalesQuotation='${getEncodedUri(SalesQuotation)}',SDDocRelatedObjectSequenceNmbr='${getEncodedUri(SDDocRelatedObjectSequenceNmbr)}')`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Deletes a specific header text for a specific sales quotation.
    #
    # + SalesQuotation - Sales Quotation
    # + Language - Language Key
    # + LongTextID - Text ID
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteA_SalesQuotationText(string SalesQuotation, string Language, string LongTextID, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_SalesQuotationText(SalesQuotation='${getEncodedUri(SalesQuotation)}',Language='${getEncodedUri(Language)}',LongTextID='${getEncodedUri(LongTextID)}')`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Deletes a related object from a sales quotation item.
    #
    # + SalesQuotation - Sales Quotation
    # + SalesQuotationItem - Sales Quotation Item
    # + SDDocRelatedObjectSequenceNmbr - Sequence Number of the Related Object of an SD Document
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteA_SlsQtanItemRelatedObject(string SalesQuotation, string SalesQuotationItem, string SDDocRelatedObjectSequenceNmbr, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_SlsQtanItemRelatedObject(SalesQuotation='${getEncodedUri(SalesQuotation)}',SalesQuotationItem='${getEncodedUri(SalesQuotationItem)}',SDDocRelatedObjectSequenceNmbr='${getEncodedUri(SDDocRelatedObjectSequenceNmbr)}')`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Reads the header of a specific sales quotation.
    #
    # + SalesQuotation - Sales Quotation
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_SalesQuotation(string SalesQuotation, map<string|string[]> headers = {}, *GetA_SalesQuotationQueries queries) returns A_SalesQuotationWrapper|error {
        string resourcePath = string `/A_SalesQuotation('${getEncodedUri(SalesQuotation)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads a specific sales quotation item.
    #
    # + SalesQuotation - Sales Quotation
    # + SalesQuotationItem - Sales Quotation Item
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_SalesQuotationItem(string SalesQuotation, string SalesQuotationItem, map<string|string[]> headers = {}, *GetA_SalesQuotationItemQueries queries) returns A_SalesQuotationItemWrapper|error {
        string resourcePath = string `/A_SalesQuotationItem(SalesQuotation='${getEncodedUri(SalesQuotation)}',SalesQuotationItem='${getEncodedUri(SalesQuotationItem)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the item partners of a specific item and with a specific partner function in a specific sales quotation.
    #
    # + SalesQuotation - Sales and Distribution Document Number
    # + SalesQuotationItem - Item number of the SD document
    # + PartnerFunction - Partner Function
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_SalesQuotationItemPartner(string SalesQuotation, string SalesQuotationItem, string PartnerFunction, map<string|string[]> headers = {}, *GetA_SalesQuotationItemPartnerQueries queries) returns A_SalesQuotationItemPartnerWrapper|error {
        string resourcePath = string `/A_SalesQuotationItemPartner(SalesQuotation='${getEncodedUri(SalesQuotation)}',SalesQuotationItem='${getEncodedUri(SalesQuotationItem)}',PartnerFunction='${getEncodedUri(PartnerFunction)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the pricing element of a specific sales quotation item.
    #
    # + SalesQuotation - Sales Document
    # + SalesQuotationItem - Condition item number
    # + PricingProcedureStep - Step Number
    # + PricingProcedureCounter - Condition Counter
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_SalesQuotationItemPrcgElmnt(string SalesQuotation, string SalesQuotationItem, string PricingProcedureStep, string PricingProcedureCounter, map<string|string[]> headers = {}, *GetA_SalesQuotationItemPrcgElmntQueries queries) returns A_SalesQuotationItemPrcgElmntWrapper|error {
        string resourcePath = string `/A_SalesQuotationItemPrcgElmnt(SalesQuotation='${getEncodedUri(SalesQuotation)}',SalesQuotationItem='${getEncodedUri(SalesQuotationItem)}',PricingProcedureStep='${getEncodedUri(PricingProcedureStep)}',PricingProcedureCounter='${getEncodedUri(PricingProcedureCounter)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads a specific item text.
    #
    # + SalesQuotation - Sales Quotation
    # + SalesQuotationItem - Sales Quotation Item
    # + Language - Language Key
    # + LongTextID - Text ID
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_SalesQuotationItemText(string SalesQuotation, string SalesQuotationItem, string Language, string LongTextID, map<string|string[]> headers = {}, *GetA_SalesQuotationItemTextQueries queries) returns A_SalesQuotationItemTextWrapper|error {
        string resourcePath = string `/A_SalesQuotationItemText(SalesQuotation='${getEncodedUri(SalesQuotation)}',SalesQuotationItem='${getEncodedUri(SalesQuotationItem)}',Language='${getEncodedUri(Language)}',LongTextID='${getEncodedUri(LongTextID)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the header partners of a specific sales quotation and with a specific partner function.
    #
    # + SalesQuotation - Sales and Distribution Document Number
    # + PartnerFunction - Partner Function
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_SalesQuotationPartner(string SalesQuotation, string PartnerFunction, map<string|string[]> headers = {}, *GetA_SalesQuotationPartnerQueries queries) returns A_SalesQuotationPartnerWrapper|error {
        string resourcePath = string `/A_SalesQuotationPartner(SalesQuotation='${getEncodedUri(SalesQuotation)}',PartnerFunction='${getEncodedUri(PartnerFunction)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the header pricing element for a specific sales quotation.
    #
    # + SalesQuotation - Sales Document
    # + PricingProcedureStep - Step Number
    # + PricingProcedureCounter - Condition Counter
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_SalesQuotationPrcgElmnt(string SalesQuotation, string PricingProcedureStep, string PricingProcedureCounter, map<string|string[]> headers = {}, *GetA_SalesQuotationPrcgElmntQueries queries) returns A_SalesQuotationPrcgElmntWrapper|error {
        string resourcePath = string `/A_SalesQuotationPrcgElmnt(SalesQuotation='${getEncodedUri(SalesQuotation)}',PricingProcedureStep='${getEncodedUri(PricingProcedureStep)}',PricingProcedureCounter='${getEncodedUri(PricingProcedureCounter)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads a related object of a sales quotation.
    #
    # + SalesQuotation - Sales Quotation
    # + SDDocRelatedObjectSequenceNmbr - Sequence Number of the Related Object of an SD Document
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_SalesQuotationRelatedObject(string SalesQuotation, string SDDocRelatedObjectSequenceNmbr, map<string|string[]> headers = {}, *GetA_SalesQuotationRelatedObjectQueries queries) returns A_SalesQuotationRelatedObjectWrapper|error {
        string resourcePath = string `/A_SalesQuotationRelatedObject(SalesQuotation='${getEncodedUri(SalesQuotation)}',SDDocRelatedObjectSequenceNmbr='${getEncodedUri(SDDocRelatedObjectSequenceNmbr)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the header texts of a specific sales quotation.
    #
    # + SalesQuotation - Sales Quotation
    # + Language - Language Key
    # + LongTextID - Text ID
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_SalesQuotationText(string SalesQuotation, string Language, string LongTextID, map<string|string[]> headers = {}, *GetA_SalesQuotationTextQueries queries) returns A_SalesQuotationTextWrapper|error {
        string resourcePath = string `/A_SalesQuotationText(SalesQuotation='${getEncodedUri(SalesQuotation)}',Language='${getEncodedUri(Language)}',LongTextID='${getEncodedUri(LongTextID)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads a related object from a sales quotation item.
    #
    # + SalesQuotation - Sales Quotation
    # + SalesQuotationItem - Sales Quotation Item
    # + SDDocRelatedObjectSequenceNmbr - Sequence Number of the Related Object of an SD Document
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_SlsQtanItemRelatedObject(string SalesQuotation, string SalesQuotationItem, string SDDocRelatedObjectSequenceNmbr, map<string|string[]> headers = {}, *GetA_SlsQtanItemRelatedObjectQueries queries) returns A_SlsQtanItemRelatedObjectWrapper|error {
        string resourcePath = string `/A_SlsQtanItemRelatedObject(SalesQuotation='${getEncodedUri(SalesQuotation)}',SalesQuotationItem='${getEncodedUri(SalesQuotationItem)}',SDDocRelatedObjectSequenceNmbr='${getEncodedUri(SDDocRelatedObjectSequenceNmbr)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads a preceding item of a sales quotation item.
    #
    # + SalesQuotation - Subsequent Sales and Distribution Document
    # + SalesQuotationItem - Subsequent Item of an SD Document
    # + DocRelationshipUUID - SD Unique Document Relationship Identification
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_SlsQtanItmPrecdgProcFlow(string SalesQuotation, string SalesQuotationItem, string DocRelationshipUUID, map<string|string[]> headers = {}, *GetA_SlsQtanItmPrecdgProcFlowQueries queries) returns A_SlsQtanItmPrecdgProcFlowWrapper|error {
        string resourcePath = string `/A_SlsQtanItmPrecdgProcFlow(SalesQuotation='${getEncodedUri(SalesQuotation)}',SalesQuotationItem='${getEncodedUri(SalesQuotationItem)}',DocRelationshipUUID=guid'${getEncodedUri(DocRelationshipUUID)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads a subsequent item of a sales quotation item.
    #
    # + SalesQuotation - Preceding sales and distribution document
    # + SalesQuotationItem - Preceding Item of an SD Document
    # + DocRelationshipUUID - SD Unique Document Relationship Identification
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_SlsQtanItmSubsqntProcFlow(string SalesQuotation, string SalesQuotationItem, string DocRelationshipUUID, map<string|string[]> headers = {}, *GetA_SlsQtanItmSubsqntProcFlowQueries queries) returns A_SlsQtanItmSubsqntProcFlowWrapper|error {
        string resourcePath = string `/A_SlsQtanItmSubsqntProcFlow(SalesQuotation='${getEncodedUri(SalesQuotation)}',SalesQuotationItem='${getEncodedUri(SalesQuotationItem)}',DocRelationshipUUID=guid'${getEncodedUri(DocRelationshipUUID)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads a preceding document of a sales quotation.
    #
    # + SalesQuotation - Subsequent Sales and Distribution Document
    # + DocRelationshipUUID - SD Unique Document Relationship Identification
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_SlsQtanPrecdgProcFlow(string SalesQuotation, string DocRelationshipUUID, map<string|string[]> headers = {}, *GetA_SlsQtanPrecdgProcFlowQueries queries) returns A_SlsQtanPrecdgProcFlowWrapper|error {
        string resourcePath = string `/A_SlsQtanPrecdgProcFlow(SalesQuotation='${getEncodedUri(SalesQuotation)}',DocRelationshipUUID=guid'${getEncodedUri(DocRelationshipUUID)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads a subsequent document of a sales quotation.
    #
    # + SalesQuotation - Preceding sales and distribution document
    # + DocRelationshipUUID - SD Unique Document Relationship Identification
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_SlsQtanSubsqntProcFlow(string SalesQuotation, string DocRelationshipUUID, map<string|string[]> headers = {}, *GetA_SlsQtanSubsqntProcFlowQueries queries) returns A_SlsQtanSubsqntProcFlowWrapper|error {
        string resourcePath = string `/A_SlsQtanSubsqntProcFlow(SalesQuotation='${getEncodedUri(SalesQuotation)}',DocRelationshipUUID=guid'${getEncodedUri(DocRelationshipUUID)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales quotation item for a specific partner function of a sales quotation item.
    #
    # + SalesQuotation - Sales and Distribution Document Number
    # + SalesQuotationItem - Item number of the SD document
    # + PartnerFunction - Partner Function
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesQuotationItemOfA_SalesQuotationItemPartner(string SalesQuotation, string SalesQuotationItem, string PartnerFunction, map<string|string[]> headers = {}, *GetSalesQuotationItemOfA_SalesQuotationItemPartnerQueries queries) returns A_SalesQuotationItemWrapper|error {
        string resourcePath = string `/A_SalesQuotationItemPartner(SalesQuotation='${getEncodedUri(SalesQuotation)}',SalesQuotationItem='${getEncodedUri(SalesQuotationItem)}',PartnerFunction='${getEncodedUri(PartnerFunction)}')/to_SalesQuotationItem`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales quotation item for a specific pricing element.
    #
    # + SalesQuotation - Sales Document
    # + SalesQuotationItem - Condition item number
    # + PricingProcedureStep - Step Number
    # + PricingProcedureCounter - Condition Counter
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesQuotationItemOfA_SalesQuotationItemPrcgElmnt(string SalesQuotation, string SalesQuotationItem, string PricingProcedureStep, string PricingProcedureCounter, map<string|string[]> headers = {}, *GetSalesQuotationItemOfA_SalesQuotationItemPrcgElmntQueries queries) returns A_SalesQuotationItemWrapper|error {
        string resourcePath = string `/A_SalesQuotationItemPrcgElmnt(SalesQuotation='${getEncodedUri(SalesQuotation)}',SalesQuotationItem='${getEncodedUri(SalesQuotationItem)}',PricingProcedureStep='${getEncodedUri(PricingProcedureStep)}',PricingProcedureCounter='${getEncodedUri(PricingProcedureCounter)}')/to_SalesQuotationItem`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales quotation item for a specific item text.
    #
    # + SalesQuotation - Sales Quotation
    # + SalesQuotationItem - Sales Quotation Item
    # + Language - Language Key
    # + LongTextID - Text ID
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesQuotationItemOfA_SalesQuotationItemText(string SalesQuotation, string SalesQuotationItem, string Language, string LongTextID, map<string|string[]> headers = {}, *GetSalesQuotationItemOfA_SalesQuotationItemTextQueries queries) returns A_SalesQuotationItemWrapper|error {
        string resourcePath = string `/A_SalesQuotationItemText(SalesQuotation='${getEncodedUri(SalesQuotation)}',SalesQuotationItem='${getEncodedUri(SalesQuotationItem)}',Language='${getEncodedUri(Language)}',LongTextID='${getEncodedUri(LongTextID)}')/to_SalesQuotationItem`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales quotation item for a related object of a sales quotation item.
    #
    # + SalesQuotation - Sales Quotation
    # + SalesQuotationItem - Sales Quotation Item
    # + SDDocRelatedObjectSequenceNmbr - Sequence Number of the Related Object of an SD Document
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesQuotationItemOfA_SlsQtanItemRelatedObject(string SalesQuotation, string SalesQuotationItem, string SDDocRelatedObjectSequenceNmbr, map<string|string[]> headers = {}, *GetSalesQuotationItemOfA_SlsQtanItemRelatedObjectQueries queries) returns A_SalesQuotationItemWrapper|error {
        string resourcePath = string `/A_SlsQtanItemRelatedObject(SalesQuotation='${getEncodedUri(SalesQuotation)}',SalesQuotationItem='${getEncodedUri(SalesQuotationItem)}',SDDocRelatedObjectSequenceNmbr='${getEncodedUri(SDDocRelatedObjectSequenceNmbr)}')/to_SalesQuotationItem`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales quotation item for a preceding item of a sales quotation item.
    #
    # + SalesQuotation - Subsequent Sales and Distribution Document
    # + SalesQuotationItem - Subsequent Item of an SD Document
    # + DocRelationshipUUID - SD Unique Document Relationship Identification
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesQuotationItemOfA_SlsQtanItmPrecdgProcFlow(string SalesQuotation, string SalesQuotationItem, string DocRelationshipUUID, map<string|string[]> headers = {}, *GetSalesQuotationItemOfA_SlsQtanItmPrecdgProcFlowQueries queries) returns A_SalesQuotationItemWrapper|error {
        string resourcePath = string `/A_SlsQtanItmPrecdgProcFlow(SalesQuotation='${getEncodedUri(SalesQuotation)}',SalesQuotationItem='${getEncodedUri(SalesQuotationItem)}',DocRelationshipUUID=guid'${getEncodedUri(DocRelationshipUUID)}')/to_SalesQuotationItem`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales quotation item for a subsequent item of a sales quotation item.
    #
    # + SalesQuotation - Preceding sales and distribution document
    # + SalesQuotationItem - Preceding Item of an SD Document
    # + DocRelationshipUUID - SD Unique Document Relationship Identification
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesQuotationItemOfA_SlsQtanItmSubsqntProcFlow(string SalesQuotation, string SalesQuotationItem, string DocRelationshipUUID, map<string|string[]> headers = {}, *GetSalesQuotationItemOfA_SlsQtanItmSubsqntProcFlowQueries queries) returns A_SalesQuotationItemWrapper|error {
        string resourcePath = string `/A_SlsQtanItmSubsqntProcFlow(SalesQuotation='${getEncodedUri(SalesQuotation)}',SalesQuotationItem='${getEncodedUri(SalesQuotationItem)}',DocRelationshipUUID=guid'${getEncodedUri(DocRelationshipUUID)}')/to_SalesQuotationItem`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales quotation header for a specific item.
    #
    # + SalesQuotation - Sales Quotation
    # + SalesQuotationItem - Sales Quotation Item
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesQuotationOfA_SalesQuotationItem(string SalesQuotation, string SalesQuotationItem, map<string|string[]> headers = {}, *GetSalesQuotationOfA_SalesQuotationItemQueries queries) returns A_SalesQuotationWrapper|error {
        string resourcePath = string `/A_SalesQuotationItem(SalesQuotation='${getEncodedUri(SalesQuotation)}',SalesQuotationItem='${getEncodedUri(SalesQuotationItem)}')/to_SalesQuotation`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales quotation header for a specific partner function of a sales quotation item.
    #
    # + SalesQuotation - Sales and Distribution Document Number
    # + SalesQuotationItem - Item number of the SD document
    # + PartnerFunction - Partner Function
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesQuotationOfA_SalesQuotationItemPartner(string SalesQuotation, string SalesQuotationItem, string PartnerFunction, map<string|string[]> headers = {}, *GetSalesQuotationOfA_SalesQuotationItemPartnerQueries queries) returns A_SalesQuotationWrapper|error {
        string resourcePath = string `/A_SalesQuotationItemPartner(SalesQuotation='${getEncodedUri(SalesQuotation)}',SalesQuotationItem='${getEncodedUri(SalesQuotationItem)}',PartnerFunction='${getEncodedUri(PartnerFunction)}')/to_SalesQuotation`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales quotation header for a specific pricing element.
    #
    # + SalesQuotation - Sales Document
    # + SalesQuotationItem - Condition item number
    # + PricingProcedureStep - Step Number
    # + PricingProcedureCounter - Condition Counter
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesQuotationOfA_SalesQuotationItemPrcgElmnt(string SalesQuotation, string SalesQuotationItem, string PricingProcedureStep, string PricingProcedureCounter, map<string|string[]> headers = {}, *GetSalesQuotationOfA_SalesQuotationItemPrcgElmntQueries queries) returns A_SalesQuotationWrapper|error {
        string resourcePath = string `/A_SalesQuotationItemPrcgElmnt(SalesQuotation='${getEncodedUri(SalesQuotation)}',SalesQuotationItem='${getEncodedUri(SalesQuotationItem)}',PricingProcedureStep='${getEncodedUri(PricingProcedureStep)}',PricingProcedureCounter='${getEncodedUri(PricingProcedureCounter)}')/to_SalesQuotation`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales quotation header for a specific text of a sales quotation item.
    #
    # + SalesQuotation - Sales Quotation
    # + SalesQuotationItem - Sales Quotation Item
    # + Language - Language Key
    # + LongTextID - Text ID
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesQuotationOfA_SalesQuotationItemText(string SalesQuotation, string SalesQuotationItem, string Language, string LongTextID, map<string|string[]> headers = {}, *GetSalesQuotationOfA_SalesQuotationItemTextQueries queries) returns A_SalesQuotationWrapper|error {
        string resourcePath = string `/A_SalesQuotationItemText(SalesQuotation='${getEncodedUri(SalesQuotation)}',SalesQuotationItem='${getEncodedUri(SalesQuotationItem)}',Language='${getEncodedUri(Language)}',LongTextID='${getEncodedUri(LongTextID)}')/to_SalesQuotation`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales quotation header for a specific header partner.
    #
    # + SalesQuotation - Sales and Distribution Document Number
    # + PartnerFunction - Partner Function
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesQuotationOfA_SalesQuotationPartner(string SalesQuotation, string PartnerFunction, map<string|string[]> headers = {}, *GetSalesQuotationOfA_SalesQuotationPartnerQueries queries) returns A_SalesQuotationWrapper|error {
        string resourcePath = string `/A_SalesQuotationPartner(SalesQuotation='${getEncodedUri(SalesQuotation)}',PartnerFunction='${getEncodedUri(PartnerFunction)}')/to_SalesQuotation`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales quotation header for a specific pricing element.
    #
    # + SalesQuotation - Sales Document
    # + PricingProcedureStep - Step Number
    # + PricingProcedureCounter - Condition Counter
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesQuotationOfA_SalesQuotationPrcgElmnt(string SalesQuotation, string PricingProcedureStep, string PricingProcedureCounter, map<string|string[]> headers = {}, *GetSalesQuotationOfA_SalesQuotationPrcgElmntQueries queries) returns A_SalesQuotationWrapper|error {
        string resourcePath = string `/A_SalesQuotationPrcgElmnt(SalesQuotation='${getEncodedUri(SalesQuotation)}',PricingProcedureStep='${getEncodedUri(PricingProcedureStep)}',PricingProcedureCounter='${getEncodedUri(PricingProcedureCounter)}')/to_SalesQuotation`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales quotation header for a related object of a sales quotation.
    #
    # + SalesQuotation - Sales Quotation
    # + SDDocRelatedObjectSequenceNmbr - Sequence Number of the Related Object of an SD Document
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesQuotationOfA_SalesQuotationRelatedObject(string SalesQuotation, string SDDocRelatedObjectSequenceNmbr, map<string|string[]> headers = {}, *GetSalesQuotationOfA_SalesQuotationRelatedObjectQueries queries) returns A_SalesQuotationWrapper|error {
        string resourcePath = string `/A_SalesQuotationRelatedObject(SalesQuotation='${getEncodedUri(SalesQuotation)}',SDDocRelatedObjectSequenceNmbr='${getEncodedUri(SDDocRelatedObjectSequenceNmbr)}')/to_SalesQuotation`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales quotation header for a specific header text.
    #
    # + SalesQuotation - Sales Quotation
    # + Language - Language Key
    # + LongTextID - Text ID
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesQuotationOfA_SalesQuotationText(string SalesQuotation, string Language, string LongTextID, map<string|string[]> headers = {}, *GetSalesQuotationOfA_SalesQuotationTextQueries queries) returns A_SalesQuotationWrapper|error {
        string resourcePath = string `/A_SalesQuotationText(SalesQuotation='${getEncodedUri(SalesQuotation)}',Language='${getEncodedUri(Language)}',LongTextID='${getEncodedUri(LongTextID)}')/to_SalesQuotation`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales quotation header for a related object of a sales quotation item.
    #
    # + SalesQuotation - Sales Quotation
    # + SalesQuotationItem - Sales Quotation Item
    # + SDDocRelatedObjectSequenceNmbr - Sequence Number of the Related Object of an SD Document
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesQuotationOfA_SlsQtanItemRelatedObject(string SalesQuotation, string SalesQuotationItem, string SDDocRelatedObjectSequenceNmbr, map<string|string[]> headers = {}, *GetSalesQuotationOfA_SlsQtanItemRelatedObjectQueries queries) returns A_SalesQuotationWrapper|error {
        string resourcePath = string `/A_SlsQtanItemRelatedObject(SalesQuotation='${getEncodedUri(SalesQuotation)}',SalesQuotationItem='${getEncodedUri(SalesQuotationItem)}',SDDocRelatedObjectSequenceNmbr='${getEncodedUri(SDDocRelatedObjectSequenceNmbr)}')/to_SalesQuotation`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales quotation header for a preceding item of a sales quotation item.
    #
    # + SalesQuotation - Subsequent Sales and Distribution Document
    # + SalesQuotationItem - Subsequent Item of an SD Document
    # + DocRelationshipUUID - SD Unique Document Relationship Identification
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesQuotationOfA_SlsQtanItmPrecdgProcFlow(string SalesQuotation, string SalesQuotationItem, string DocRelationshipUUID, map<string|string[]> headers = {}, *GetSalesQuotationOfA_SlsQtanItmPrecdgProcFlowQueries queries) returns A_SalesQuotationWrapper|error {
        string resourcePath = string `/A_SlsQtanItmPrecdgProcFlow(SalesQuotation='${getEncodedUri(SalesQuotation)}',SalesQuotationItem='${getEncodedUri(SalesQuotationItem)}',DocRelationshipUUID=guid'${getEncodedUri(DocRelationshipUUID)}')/to_SalesQuotation`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales quotation header for a subsequent item of a sales quotation item.
    #
    # + SalesQuotation - Preceding sales and distribution document
    # + SalesQuotationItem - Preceding Item of an SD Document
    # + DocRelationshipUUID - SD Unique Document Relationship Identification
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesQuotationOfA_SlsQtanItmSubsqntProcFlow(string SalesQuotation, string SalesQuotationItem, string DocRelationshipUUID, map<string|string[]> headers = {}, *GetSalesQuotationOfA_SlsQtanItmSubsqntProcFlowQueries queries) returns A_SalesQuotationWrapper|error {
        string resourcePath = string `/A_SlsQtanItmSubsqntProcFlow(SalesQuotation='${getEncodedUri(SalesQuotation)}',SalesQuotationItem='${getEncodedUri(SalesQuotationItem)}',DocRelationshipUUID=guid'${getEncodedUri(DocRelationshipUUID)}')/to_SalesQuotation`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales quotation header for a preceding document of a sales quotation.
    #
    # + SalesQuotation - Subsequent Sales and Distribution Document
    # + DocRelationshipUUID - SD Unique Document Relationship Identification
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesQuotationOfA_SlsQtanPrecdgProcFlow(string SalesQuotation, string DocRelationshipUUID, map<string|string[]> headers = {}, *GetSalesQuotationOfA_SlsQtanPrecdgProcFlowQueries queries) returns A_SalesQuotationWrapper|error {
        string resourcePath = string `/A_SlsQtanPrecdgProcFlow(SalesQuotation='${getEncodedUri(SalesQuotation)}',DocRelationshipUUID=guid'${getEncodedUri(DocRelationshipUUID)}')/to_SalesQuotation`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the sales quotation header for a subsequent document of a sales quotation.
    #
    # + SalesQuotation - Preceding sales and distribution document
    # + DocRelationshipUUID - SD Unique Document Relationship Identification
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesQuotationOfA_SlsQtanSubsqntProcFlow(string SalesQuotation, string DocRelationshipUUID, map<string|string[]> headers = {}, *GetSalesQuotationOfA_SlsQtanSubsqntProcFlowQueries queries) returns A_SalesQuotationWrapper|error {
        string resourcePath = string `/A_SlsQtanSubsqntProcFlow(SalesQuotation='${getEncodedUri(SalesQuotation)}',DocRelationshipUUID=guid'${getEncodedUri(DocRelationshipUUID)}')/to_SalesQuotation`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the item partners for all sales quotations.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_SalesQuotationItemPartners(map<string|string[]> headers = {}, *ListA_SalesQuotationItemPartnersQueries queries) returns CollectionOfA_SalesQuotationItemPartnerWrapper|error {
        string resourcePath = string `/A_SalesQuotationItemPartner`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the item pricing elements of all sales quotations.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_SalesQuotationItemPrcgElmnts(map<string|string[]> headers = {}, *ListA_SalesQuotationItemPrcgElmntsQueries queries) returns CollectionOfA_SalesQuotationItemPrcgElmntWrapper|error {
        string resourcePath = string `/A_SalesQuotationItemPrcgElmnt`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads item texts of all sales quotations.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_SalesQuotationItemTexts(map<string|string[]> headers = {}, *ListA_SalesQuotationItemTextsQueries queries) returns CollectionOfA_SalesQuotationItemTextWrapper|error {
        string resourcePath = string `/A_SalesQuotationItemText`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads all sales quotation items.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_SalesQuotationItems(map<string|string[]> headers = {}, *ListA_SalesQuotationItemsQueries queries) returns CollectionOfA_SalesQuotationItemWrapper|error {
        string resourcePath = string `/A_SalesQuotationItem`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the header partners of all sales quotations.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_SalesQuotationPartners(map<string|string[]> headers = {}, *ListA_SalesQuotationPartnersQueries queries) returns CollectionOfA_SalesQuotationPartnerWrapper|error {
        string resourcePath = string `/A_SalesQuotationPartner`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the header pricing elements of all sales quotations.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_SalesQuotationPrcgElmnts(map<string|string[]> headers = {}, *ListA_SalesQuotationPrcgElmntsQueries queries) returns CollectionOfA_SalesQuotationPrcgElmntWrapper|error {
        string resourcePath = string `/A_SalesQuotationPrcgElmnt`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the related objects of all sales quotations.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_SalesQuotationRelatedObjects(map<string|string[]> headers = {}, *ListA_SalesQuotationRelatedObjectsQueries queries) returns CollectionOfA_SalesQuotationRelatedObjectWrapper|error {
        string resourcePath = string `/A_SalesQuotationRelatedObject`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the header texts of all sales quotations.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_SalesQuotationTexts(map<string|string[]> headers = {}, *ListA_SalesQuotationTextsQueries queries) returns CollectionOfA_SalesQuotationTextWrapper|error {
        string resourcePath = string `/A_SalesQuotationText`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads all sales quotation headers.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_SalesQuotations(map<string|string[]> headers = {}, *ListA_SalesQuotationsQueries queries) returns CollectionOfA_SalesQuotationWrapper|error {
        string resourcePath = string `/A_SalesQuotation`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads related objects from all sales quotation items.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_SlsQtanItemRelatedObjects(map<string|string[]> headers = {}, *ListA_SlsQtanItemRelatedObjectsQueries queries) returns CollectionOfA_SlsQtanItemRelatedObjectWrapper|error {
        string resourcePath = string `/A_SlsQtanItemRelatedObject`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the preceding items of all sales quotation items.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_SlsQtanItmPrecdgProcFlows(map<string|string[]> headers = {}, *ListA_SlsQtanItmPrecdgProcFlowsQueries queries) returns CollectionOfA_SlsQtanItmPrecdgProcFlowWrapper|error {
        string resourcePath = string `/A_SlsQtanItmPrecdgProcFlow`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the subsequent items of all sales quotation items.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_SlsQtanItmSubsqntProcFlows(map<string|string[]> headers = {}, *ListA_SlsQtanItmSubsqntProcFlowsQueries queries) returns CollectionOfA_SlsQtanItmSubsqntProcFlowWrapper|error {
        string resourcePath = string `/A_SlsQtanItmSubsqntProcFlow`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the preceding documents of all sales quotations.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_SlsQtanPrecdgProcFlows(map<string|string[]> headers = {}, *ListA_SlsQtanPrecdgProcFlowsQueries queries) returns CollectionOfA_SlsQtanPrecdgProcFlowWrapper|error {
        string resourcePath = string `/A_SlsQtanPrecdgProcFlow`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the subsequent documents of all sales quotations.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_SlsQtanSubsqntProcFlows(map<string|string[]> headers = {}, *ListA_SlsQtanSubsqntProcFlowsQueries queries) returns CollectionOfA_SlsQtanSubsqntProcFlowWrapper|error {
        string resourcePath = string `/A_SlsQtanSubsqntProcFlow`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads all items of a specific sales quotation.
    #
    # + SalesQuotation - Sales Quotation
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listItemsOfA_SalesQuotation(string SalesQuotation, map<string|string[]> headers = {}, *ListItemsOfA_SalesQuotationQueries queries) returns CollectionOfA_SalesQuotationItemWrapper|error {
        string resourcePath = string `/A_SalesQuotation('${getEncodedUri(SalesQuotation)}')/to_Item`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the header partners of a specific sales quotation.
    #
    # + SalesQuotation - Sales Quotation
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPartnersOfA_SalesQuotation(string SalesQuotation, map<string|string[]> headers = {}, *ListPartnersOfA_SalesQuotationQueries queries) returns CollectionOfA_SalesQuotationPartnerWrapper|error {
        string resourcePath = string `/A_SalesQuotation('${getEncodedUri(SalesQuotation)}')/to_Partner`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the item partners of a specific sales quotation item.
    #
    # + SalesQuotation - Sales Quotation
    # + SalesQuotationItem - Sales Quotation Item
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPartnersOfA_SalesQuotationItem(string SalesQuotation, string SalesQuotationItem, map<string|string[]> headers = {}, *ListPartnersOfA_SalesQuotationItemQueries queries) returns CollectionOfA_SalesQuotationItemPartnerWrapper|error {
        string resourcePath = string `/A_SalesQuotationItem(SalesQuotation='${getEncodedUri(SalesQuotation)}',SalesQuotationItem='${getEncodedUri(SalesQuotationItem)}')/to_Partner`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the preceding items of a sales quotation item.
    #
    # + SalesQuotation - Sales Quotation
    # + SalesQuotationItem - Sales Quotation Item
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPrecedingProcFlowDocItemsOfA_SalesQuotationItem(string SalesQuotation, string SalesQuotationItem, map<string|string[]> headers = {}, *ListPrecedingProcFlowDocItemsOfA_SalesQuotationItemQueries queries) returns CollectionOfA_SlsQtanItmPrecdgProcFlowWrapper|error {
        string resourcePath = string `/A_SalesQuotationItem(SalesQuotation='${getEncodedUri(SalesQuotation)}',SalesQuotationItem='${getEncodedUri(SalesQuotationItem)}')/to_PrecedingProcFlowDocItem`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the preceding documents of a sales quotation.
    #
    # + SalesQuotation - Sales Quotation
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPrecedingProcFlowDocsOfA_SalesQuotation(string SalesQuotation, map<string|string[]> headers = {}, *ListPrecedingProcFlowDocsOfA_SalesQuotationQueries queries) returns CollectionOfA_SlsQtanPrecdgProcFlowWrapper|error {
        string resourcePath = string `/A_SalesQuotation('${getEncodedUri(SalesQuotation)}')/to_PrecedingProcFlowDoc`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the header pricing element of a specific sales quotation.
    #
    # + SalesQuotation - Sales Quotation
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPricingElementsOfA_SalesQuotation(string SalesQuotation, map<string|string[]> headers = {}, *ListPricingElementsOfA_SalesQuotationQueries queries) returns CollectionOfA_SalesQuotationPrcgElmntWrapper|error {
        string resourcePath = string `/A_SalesQuotation('${getEncodedUri(SalesQuotation)}')/to_PricingElement`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the pricing element of a specific sales quotation item.
    #
    # + SalesQuotation - Sales Quotation
    # + SalesQuotationItem - Sales Quotation Item
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPricingElementsOfA_SalesQuotationItem(string SalesQuotation, string SalesQuotationItem, map<string|string[]> headers = {}, *ListPricingElementsOfA_SalesQuotationItemQueries queries) returns CollectionOfA_SalesQuotationItemPrcgElmntWrapper|error {
        string resourcePath = string `/A_SalesQuotationItem(SalesQuotation='${getEncodedUri(SalesQuotation)}',SalesQuotationItem='${getEncodedUri(SalesQuotationItem)}')/to_PricingElement`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the related objects of a sales quotation.
    #
    # + SalesQuotation - Sales Quotation
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listRelatedObjectsOfA_SalesQuotation(string SalesQuotation, map<string|string[]> headers = {}, *ListRelatedObjectsOfA_SalesQuotationQueries queries) returns CollectionOfA_SalesQuotationRelatedObjectWrapper|error {
        string resourcePath = string `/A_SalesQuotation('${getEncodedUri(SalesQuotation)}')/to_RelatedObject`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the related objects of a sales quotation item.
    #
    # + SalesQuotation - Sales Quotation
    # + SalesQuotationItem - Sales Quotation Item
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listRelatedObjectsOfA_SalesQuotationItem(string SalesQuotation, string SalesQuotationItem, map<string|string[]> headers = {}, *ListRelatedObjectsOfA_SalesQuotationItemQueries queries) returns CollectionOfA_SlsQtanItemRelatedObjectWrapper|error {
        string resourcePath = string `/A_SalesQuotationItem(SalesQuotation='${getEncodedUri(SalesQuotation)}',SalesQuotationItem='${getEncodedUri(SalesQuotationItem)}')/to_RelatedObject`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the subsequent items of a sales quotation item.
    #
    # + SalesQuotation - Sales Quotation
    # + SalesQuotationItem - Sales Quotation Item
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listSubsequentProcFlowDocItemsOfA_SalesQuotationItem(string SalesQuotation, string SalesQuotationItem, map<string|string[]> headers = {}, *ListSubsequentProcFlowDocItemsOfA_SalesQuotationItemQueries queries) returns CollectionOfA_SlsQtanItmSubsqntProcFlowWrapper|error {
        string resourcePath = string `/A_SalesQuotationItem(SalesQuotation='${getEncodedUri(SalesQuotation)}',SalesQuotationItem='${getEncodedUri(SalesQuotationItem)}')/to_SubsequentProcFlowDocItem`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the subsequent documents of a sales quotation.
    #
    # + SalesQuotation - Sales Quotation
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listSubsequentProcFlowDocsOfA_SalesQuotation(string SalesQuotation, map<string|string[]> headers = {}, *ListSubsequentProcFlowDocsOfA_SalesQuotationQueries queries) returns CollectionOfA_SlsQtanSubsqntProcFlowWrapper|error {
        string resourcePath = string `/A_SalesQuotation('${getEncodedUri(SalesQuotation)}')/to_SubsequentProcFlowDoc`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the header texts of a specific sales quotation.
    #
    # + SalesQuotation - Sales Quotation
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listTextsOfA_SalesQuotation(string SalesQuotation, map<string|string[]> headers = {}, *ListTextsOfA_SalesQuotationQueries queries) returns CollectionOfA_SalesQuotationTextWrapper|error {
        string resourcePath = string `/A_SalesQuotation('${getEncodedUri(SalesQuotation)}')/to_Text`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the text of a specific sales quotation item.
    #
    # + SalesQuotation - Sales Quotation
    # + SalesQuotationItem - Sales Quotation Item
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listTextsOfA_SalesQuotationItem(string SalesQuotation, string SalesQuotationItem, map<string|string[]> headers = {}, *ListTextsOfA_SalesQuotationItemQueries queries) returns CollectionOfA_SalesQuotationItemTextWrapper|error {
        string resourcePath = string `/A_SalesQuotationItem(SalesQuotation='${getEncodedUri(SalesQuotation)}',SalesQuotationItem='${getEncodedUri(SalesQuotationItem)}')/to_Text`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Updates a specific sales quotation.
    #
    # + SalesQuotation - Sales Quotation
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_SalesQuotation(string SalesQuotation, Modified\ A_SalesQuotationType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_SalesQuotation('${getEncodedUri(SalesQuotation)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Updates a specific sales quotation item.
    #
    # + SalesQuotation - Sales Quotation
    # + SalesQuotationItem - Sales Quotation Item
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_SalesQuotationItem(string SalesQuotation, string SalesQuotationItem, Modified\ A_SalesQuotationItemType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_SalesQuotationItem(SalesQuotation='${getEncodedUri(SalesQuotation)}',SalesQuotationItem='${getEncodedUri(SalesQuotationItem)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Updates the item partners of a specific item and with a specific partner function in a specific sales quotation.
    #
    # + SalesQuotation - Sales and Distribution Document Number
    # + SalesQuotationItem - Item number of the SD document
    # + PartnerFunction - Partner Function
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_SalesQuotationItemPartner(string SalesQuotation, string SalesQuotationItem, string PartnerFunction, Modified\ A_SalesQuotationItemPartnerType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_SalesQuotationItemPartner(SalesQuotation='${getEncodedUri(SalesQuotation)}',SalesQuotationItem='${getEncodedUri(SalesQuotationItem)}',PartnerFunction='${getEncodedUri(PartnerFunction)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Updates an item pricing element.
    #
    # + SalesQuotation - Sales Document
    # + SalesQuotationItem - Condition item number
    # + PricingProcedureStep - Step Number
    # + PricingProcedureCounter - Condition Counter
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_SalesQuotationItemPrcgElmnt(string SalesQuotation, string SalesQuotationItem, string PricingProcedureStep, string PricingProcedureCounter, Modified\ A_SalesQuotationItemPrcgElmntType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_SalesQuotationItemPrcgElmnt(SalesQuotation='${getEncodedUri(SalesQuotation)}',SalesQuotationItem='${getEncodedUri(SalesQuotationItem)}',PricingProcedureStep='${getEncodedUri(PricingProcedureStep)}',PricingProcedureCounter='${getEncodedUri(PricingProcedureCounter)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Updates a specific item text.
    #
    # + SalesQuotation - Sales Quotation
    # + SalesQuotationItem - Sales Quotation Item
    # + Language - Language Key
    # + LongTextID - Text ID
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_SalesQuotationItemText(string SalesQuotation, string SalesQuotationItem, string Language, string LongTextID, Modified\ A_SalesQuotationItemTextType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_SalesQuotationItemText(SalesQuotation='${getEncodedUri(SalesQuotation)}',SalesQuotationItem='${getEncodedUri(SalesQuotationItem)}',Language='${getEncodedUri(Language)}',LongTextID='${getEncodedUri(LongTextID)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Updates the header partners of a specific sales quotation and with a specific partner function.
    #
    # + SalesQuotation - Sales and Distribution Document Number
    # + PartnerFunction - Partner Function
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_SalesQuotationPartner(string SalesQuotation, string PartnerFunction, Modified\ A_SalesQuotationPartnerType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_SalesQuotationPartner(SalesQuotation='${getEncodedUri(SalesQuotation)}',PartnerFunction='${getEncodedUri(PartnerFunction)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Updates a header pricing element for a specific sales quotation.
    #
    # + SalesQuotation - Sales Document
    # + PricingProcedureStep - Step Number
    # + PricingProcedureCounter - Condition Counter
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_SalesQuotationPrcgElmnt(string SalesQuotation, string PricingProcedureStep, string PricingProcedureCounter, Modified\ A_SalesQuotationPrcgElmntType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_SalesQuotationPrcgElmnt(SalesQuotation='${getEncodedUri(SalesQuotation)}',PricingProcedureStep='${getEncodedUri(PricingProcedureStep)}',PricingProcedureCounter='${getEncodedUri(PricingProcedureCounter)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Updates a specific header text for a specific sales quotation.
    #
    # + SalesQuotation - Sales Quotation
    # + Language - Language Key
    # + LongTextID - Text ID
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_SalesQuotationText(string SalesQuotation, string Language, string LongTextID, Modified\ A_SalesQuotationTextType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_SalesQuotationText(SalesQuotation='${getEncodedUri(SalesQuotation)}',Language='${getEncodedUri(Language)}',LongTextID='${getEncodedUri(LongTextID)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Send a group of requests
    #
    # + headers - Headers to be sent with the request 
    # + request - Batch request 
    # + return - Batch response 
    remote isolated function performBatchOperation(http:Request request, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/$batch`;
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Invoke action rejectApprovalRequest
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function rejectApprovalRequest(map<string|string[]> headers = {}, *RejectApprovalRequestQueries queries) returns FunctionResult_2|error {
        string resourcePath = string `/rejectApprovalRequest`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Invoke action releaseApprovalRequest
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function releaseApprovalRequest(map<string|string[]> headers = {}, *ReleaseApprovalRequestQueries queries) returns FunctionResult_1|error {
        string resourcePath = string `/releaseApprovalRequest`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }
}
