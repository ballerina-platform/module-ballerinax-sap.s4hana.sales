// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2024, WSO2 LLC. (http://www.wso2.org).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/http;

# 
# 
# In every API call, you can make use of the following operations:
# 
# * You can read entire sales orders or only parts of the data, using the provided filters.
# 
# * You can create sales orders. You can use deep insert requests, that is, you create a header plus at least one of the following entities: header partner, header pricing element, header text, item, item partner, item pricing element, and item text.
# 
# * For existing sales orders, you can create the following sub-entities on their own: header partner, header pricing element, header text, item, item partner, item pricing element, and item text.
# 
# * For existing sales orders, you can update the following entities (that is, you can change the content of their properties): header, header partner, header pricing element, header text, item, item partner, item pricing element, and item text.
# 
# * For existing sales orders, you can delete the following entities: header partner, header pricing element, header text, item, item partner, item pricing element, and item text.
# 
# For every operation, you can call the API in a synchronous or asynchronous mode. In an asynchronous mode, you can fetch the response from a separate URL later.
public isolated client class Client {
    final http:Client clientEp;
    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string serviceUrl) returns error? {
        http:ClientConfiguration httpClientConfig = {auth: config.auth, httpVersion: config.httpVersion, timeout: config.timeout, forwarded: config.forwarded, poolConfig: config.poolConfig, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, validation: config.validation};
        do {
            if config.http1Settings is ClientHttp1Settings {
                ClientHttp1Settings settings = check config.http1Settings.ensureType(ClientHttp1Settings);
                httpClientConfig.http1Settings = {...settings};
            }
            if config.http2Settings is http:ClientHttp2Settings {
                httpClientConfig.http2Settings = check config.http2Settings.ensureType(http:ClientHttp2Settings);
            }
            if config.cache is http:CacheConfig {
                httpClientConfig.cache = check config.cache.ensureType(http:CacheConfig);
            }
            if config.responseLimits is http:ResponseLimitConfigs {
                httpClientConfig.responseLimits = check config.responseLimits.ensureType(http:ResponseLimitConfigs);
            }
            if config.secureSocket is http:ClientSecureSocket {
                httpClientConfig.secureSocket = check config.secureSocket.ensureType(http:ClientSecureSocket);
            }
            if config.proxy is http:ProxyConfig {
                httpClientConfig.proxy = check config.proxy.ensureType(http:ProxyConfig);
            }
        }
        http:Client httpEp = check new (serviceUrl, httpClientConfig);
        self.clientEp = httpEp;
        return;
    }

    # Add new entity to related _Item
    #
    # + SalesOrder - Sales Order
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createItemOfSalesOrder(string SalesOrder, CreateSalesOrderItem payload, map<string|string[]> headers = {}) returns SalesOrderItem|error {
        string resourcePath = string `/SalesOrder/${getEncodedUri(SalesOrder)}/_Item`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Add new entity to related _ItemPartner
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createItemPartnerOfSalesOrderItem(string SalesOrder, string SalesOrderItem, CreateSalesOrderItemPartner payload, map<string|string[]> headers = {}) returns SalesOrderItemPartner|error {
        string resourcePath = string `/SalesOrderItem/${getEncodedUri(SalesOrder)}/${getEncodedUri(SalesOrderItem)}/_ItemPartner`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Add new entity to related _ItemPricingElement
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createItemPricingElementOfSalesOrderItem(string SalesOrder, string SalesOrderItem, CreateSalesOrderItemPricingElmnt payload, map<string|string[]> headers = {}) returns SalesOrderItemPricingElmnt|error {
        string resourcePath = string `/SalesOrderItem/${getEncodedUri(SalesOrder)}/${getEncodedUri(SalesOrderItem)}/_ItemPricingElement`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Add new entity to related _ItemText
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createItemTextOfSalesOrderItem(string SalesOrder, string SalesOrderItem, CreateSalesOrderItemText payload, map<string|string[]> headers = {}) returns SalesOrderItemText|error {
        string resourcePath = string `/SalesOrderItem/${getEncodedUri(SalesOrder)}/${getEncodedUri(SalesOrderItem)}/_ItemText`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Add new entity to related _Partner
    #
    # + SalesOrder - Sales Order
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createPartnerOfSalesOrder(string SalesOrder, CreateSalesOrderPartner payload, map<string|string[]> headers = {}) returns SalesOrderPartner|error {
        string resourcePath = string `/SalesOrder/${getEncodedUri(SalesOrder)}/_Partner`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Add new entity to related _PricingElement
    #
    # + SalesOrder - Sales Order
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createPricingElementOfSalesOrder(string SalesOrder, CreateSalesOrderPricingElement payload, map<string|string[]> headers = {}) returns SalesOrderPricingElement|error {
        string resourcePath = string `/SalesOrder/${getEncodedUri(SalesOrder)}/_PricingElement`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Add new entity to SalesOrder
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createSalesOrder(CreateSalesOrder payload, map<string|string[]> headers = {}) returns SalesOrder|error {
        string resourcePath = string `/SalesOrder`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Add new entity to related _Text
    #
    # + SalesOrder - Sales Order
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createTextOfSalesOrder(string SalesOrder, CreateSalesOrderText payload, map<string|string[]> headers = {}) returns SalesOrderText|error {
        string resourcePath = string `/SalesOrder/${getEncodedUri(SalesOrder)}/_Text`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Delete entity from SalesOrderItem
    #
    # + SalesOrder - Sales Order
    # + salesOrderItem - Sales Order Item
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteSalesOrderItem(string SalesOrder, string salesOrderItem, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/SalesOrderItem/${getEncodedUri(SalesOrder)}/${getEncodedUri(salesOrderItem)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Delete entity from SalesOrderItemPartner
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + PartnerFunction - Partner Function
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteSalesOrderItemPartner(string SalesOrder, string SalesOrderItem, string PartnerFunction, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/SalesOrderItemPartner/${getEncodedUri(SalesOrder)}/${getEncodedUri(SalesOrderItem)}/${getEncodedUri(PartnerFunction)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Delete entity from SalesOrderItemPricingElement
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + PricingProcedureStep - Step Number
    # + PricingProcedureCounter - Condition Counter
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteSalesOrderItemPricingElement(string SalesOrder, string SalesOrderItem, string PricingProcedureStep, string PricingProcedureCounter, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/SalesOrderItemPricingElement/${getEncodedUri(SalesOrder)}/${getEncodedUri(SalesOrderItem)}/${getEncodedUri(PricingProcedureStep)}/${getEncodedUri(PricingProcedureCounter)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Delete entity from SalesOrderItemText
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + Language - Language Key
    # + LongTextID - Text ID
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteSalesOrderItemText(string SalesOrder, string SalesOrderItem, string Language, string LongTextID, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/SalesOrderItemText/${getEncodedUri(SalesOrder)}/${getEncodedUri(SalesOrderItem)}/${getEncodedUri(Language)}/${getEncodedUri(LongTextID)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Delete entity from SalesOrderPartner
    #
    # + SalesOrder - Sales Order
    # + PartnerFunction - Partner Function
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteSalesOrderPartner(string SalesOrder, string PartnerFunction, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/SalesOrderPartner/${getEncodedUri(SalesOrder)}/${getEncodedUri(PartnerFunction)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Delete entity from SalesOrderPricingElement
    #
    # + SalesOrder - Sales Order
    # + PricingProcedureStep - Step Number
    # + PricingProcedureCounter - Condition Counter
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteSalesOrderPricingElement(string SalesOrder, string PricingProcedureStep, string PricingProcedureCounter, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/SalesOrderPricingElement/${getEncodedUri(SalesOrder)}/${getEncodedUri(PricingProcedureStep)}/${getEncodedUri(PricingProcedureCounter)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Delete entity from SalesOrderText
    #
    # + SalesOrder - Sales Order
    # + Language - Language Key
    # + LongTextID - Text ID
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteSalesOrderText(string SalesOrder, string Language, string LongTextID, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/SalesOrderText/${getEncodedUri(SalesOrder)}/${getEncodedUri(Language)}/${getEncodedUri(LongTextID)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get related _Item
    #
    # + SalesOrder - Sales Order
    # + salesOrderItem - Sales Order Item
    # + PartnerFunction - Partner Function
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getItemOfSalesOrderItemPartner(string SalesOrder, string salesOrderItem, string PartnerFunction, map<string|string[]> headers = {}, *GetItemOfSalesOrderItemPartnerQueries queries) returns SalesOrderItem|error {
        string resourcePath = string `/SalesOrderItemPartner/${getEncodedUri(SalesOrder)}/${getEncodedUri(salesOrderItem)}/${getEncodedUri(PartnerFunction)}/_Item`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get related _Item
    #
    # + SalesOrder - Sales Order
    # + salesOrderItem - Sales Order Item
    # + PricingProcedureStep - Step Number
    # + PricingProcedureCounter - Condition Counter
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getItemOfSalesOrderItemPricingElement(string SalesOrder, string salesOrderItem, string PricingProcedureStep, string PricingProcedureCounter, map<string|string[]> headers = {}, *GetItemOfSalesOrderItemPricingElementQueries queries) returns SalesOrderItem|error {
        string resourcePath = string `/SalesOrderItemPricingElement/${getEncodedUri(SalesOrder)}/${getEncodedUri(salesOrderItem)}/${getEncodedUri(PricingProcedureStep)}/${getEncodedUri(PricingProcedureCounter)}/_Item`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get related _Item
    #
    # + SalesOrder - Sales Order
    # + salesOrderItem - Sales Order Item
    # + Language - Language Key
    # + LongTextID - Text ID
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getItemOfSalesOrderItemText(string SalesOrder, string salesOrderItem, string Language, string LongTextID, map<string|string[]> headers = {}, *GetItemOfSalesOrderItemTextQueries queries) returns SalesOrderItem|error {
        string resourcePath = string `/SalesOrderItemText/${getEncodedUri(SalesOrder)}/${getEncodedUri(salesOrderItem)}/${getEncodedUri(Language)}/${getEncodedUri(LongTextID)}/_Item`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get related _Item
    #
    # + SalesOrder - Sales Document
    # + salesOrderItem - Sales Document Item
    # + ScheduleLine - Schedule Line Number
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getItemOfSalesOrderScheduleLine(string SalesOrder, string salesOrderItem, string ScheduleLine, map<string|string[]> headers = {}, *GetItemOfSalesOrderScheduleLineQueries queries) returns SalesOrderItem|error {
        string resourcePath = string `/SalesOrderScheduleLine/${getEncodedUri(SalesOrder)}/${getEncodedUri(salesOrderItem)}/${getEncodedUri(ScheduleLine)}/_Item`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from SalesOrder by key
    #
    # + salesOrder - Sales Order
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesOrder(string salesOrder, map<string|string[]> headers = {}, *GetSalesOrderQueries queries) returns SalesOrder|error {
        string resourcePath = string `/SalesOrder/${getEncodedUri(salesOrder)}`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from SalesOrderItem by key
    #
    # + SalesOrder - Sales Order
    # + salesOrderItem - Sales Order Item
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesOrderItem(string SalesOrder, string salesOrderItem, map<string|string[]> headers = {}, *GetSalesOrderItemQueries queries) returns SalesOrderItem|error {
        string resourcePath = string `/SalesOrderItem/${getEncodedUri(SalesOrder)}/${getEncodedUri(salesOrderItem)}`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from SalesOrderItemPartner by key
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + PartnerFunction - Partner Function
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesOrderItemPartner(string SalesOrder, string SalesOrderItem, string PartnerFunction, map<string|string[]> headers = {}, *GetSalesOrderItemPartnerQueries queries) returns SalesOrderItemPartner|error {
        string resourcePath = string `/SalesOrderItemPartner/${getEncodedUri(SalesOrder)}/${getEncodedUri(SalesOrderItem)}/${getEncodedUri(PartnerFunction)}`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from SalesOrderItemPricingElement by key
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + PricingProcedureStep - Step Number
    # + PricingProcedureCounter - Condition Counter
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesOrderItemPricingElement(string SalesOrder, string SalesOrderItem, string PricingProcedureStep, string PricingProcedureCounter, map<string|string[]> headers = {}, *GetSalesOrderItemPricingElementQueries queries) returns SalesOrderItemPricingElmnt|error {
        string resourcePath = string `/SalesOrderItemPricingElement/${getEncodedUri(SalesOrder)}/${getEncodedUri(SalesOrderItem)}/${getEncodedUri(PricingProcedureStep)}/${getEncodedUri(PricingProcedureCounter)}`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from SalesOrderItemText by key
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + Language - Language Key
    # + LongTextID - Text ID
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesOrderItemText(string SalesOrder, string SalesOrderItem, string Language, string LongTextID, map<string|string[]> headers = {}, *GetSalesOrderItemTextQueries queries) returns SalesOrderItemText|error {
        string resourcePath = string `/SalesOrderItemText/${getEncodedUri(SalesOrder)}/${getEncodedUri(SalesOrderItem)}/${getEncodedUri(Language)}/${getEncodedUri(LongTextID)}`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get related _SalesOrder
    #
    # + salesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesOrderOfSalesOrderItem(string salesOrder, string SalesOrderItem, map<string|string[]> headers = {}, *GetSalesOrderOfSalesOrderItemQueries queries) returns SalesOrder|error {
        string resourcePath = string `/SalesOrderItem/${getEncodedUri(salesOrder)}/${getEncodedUri(SalesOrderItem)}/_SalesOrder`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get related _SalesOrder
    #
    # + salesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + PartnerFunction - Partner Function
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesOrderOfSalesOrderItemPartner(string salesOrder, string SalesOrderItem, string PartnerFunction, map<string|string[]> headers = {}, *GetSalesOrderOfSalesOrderItemPartnerQueries queries) returns SalesOrder|error {
        string resourcePath = string `/SalesOrderItemPartner/${getEncodedUri(salesOrder)}/${getEncodedUri(SalesOrderItem)}/${getEncodedUri(PartnerFunction)}/_SalesOrder`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get related _SalesOrder
    #
    # + salesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + PricingProcedureStep - Step Number
    # + PricingProcedureCounter - Condition Counter
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesOrderOfSalesOrderItemPricingElement(string salesOrder, string SalesOrderItem, string PricingProcedureStep, string PricingProcedureCounter, map<string|string[]> headers = {}, *GetSalesOrderOfSalesOrderItemPricingElementQueries queries) returns SalesOrder|error {
        string resourcePath = string `/SalesOrderItemPricingElement/${getEncodedUri(salesOrder)}/${getEncodedUri(SalesOrderItem)}/${getEncodedUri(PricingProcedureStep)}/${getEncodedUri(PricingProcedureCounter)}/_SalesOrder`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get related _SalesOrder
    #
    # + salesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + Language - Language Key
    # + LongTextID - Text ID
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesOrderOfSalesOrderItemText(string salesOrder, string SalesOrderItem, string Language, string LongTextID, map<string|string[]> headers = {}, *GetSalesOrderOfSalesOrderItemTextQueries queries) returns SalesOrder|error {
        string resourcePath = string `/SalesOrderItemText/${getEncodedUri(salesOrder)}/${getEncodedUri(SalesOrderItem)}/${getEncodedUri(Language)}/${getEncodedUri(LongTextID)}/_SalesOrder`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get related _SalesOrder
    #
    # + salesOrder - Sales Order
    # + PartnerFunction - Partner Function
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesOrderOfSalesOrderPartner(string salesOrder, string PartnerFunction, map<string|string[]> headers = {}, *GetSalesOrderOfSalesOrderPartnerQueries queries) returns SalesOrder|error {
        string resourcePath = string `/SalesOrderPartner/${getEncodedUri(salesOrder)}/${getEncodedUri(PartnerFunction)}/_SalesOrder`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get related _SalesOrder
    #
    # + salesOrder - Sales Order
    # + PricingProcedureStep - Step Number
    # + PricingProcedureCounter - Condition Counter
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesOrderOfSalesOrderPricingElement(string salesOrder, string PricingProcedureStep, string PricingProcedureCounter, map<string|string[]> headers = {}, *GetSalesOrderOfSalesOrderPricingElementQueries queries) returns SalesOrder|error {
        string resourcePath = string `/SalesOrderPricingElement/${getEncodedUri(salesOrder)}/${getEncodedUri(PricingProcedureStep)}/${getEncodedUri(PricingProcedureCounter)}/_SalesOrder`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get related _SalesOrder
    #
    # + salesOrder - Sales Document
    # + SalesOrderItem - Sales Document Item
    # + ScheduleLine - Schedule Line Number
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesOrderOfSalesOrderScheduleLine(string salesOrder, string SalesOrderItem, string ScheduleLine, map<string|string[]> headers = {}, *GetSalesOrderOfSalesOrderScheduleLineQueries queries) returns SalesOrder|error {
        string resourcePath = string `/SalesOrderScheduleLine/${getEncodedUri(salesOrder)}/${getEncodedUri(SalesOrderItem)}/${getEncodedUri(ScheduleLine)}/_SalesOrder`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get related _SalesOrder
    #
    # + salesOrder - Sales Order
    # + Language - Language Key
    # + LongTextID - Text ID
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesOrderOfSalesOrderText(string salesOrder, string Language, string LongTextID, map<string|string[]> headers = {}, *GetSalesOrderOfSalesOrderTextQueries queries) returns SalesOrder|error {
        string resourcePath = string `/SalesOrderText/${getEncodedUri(salesOrder)}/${getEncodedUri(Language)}/${getEncodedUri(LongTextID)}/_SalesOrder`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from SalesOrderPartner by key
    #
    # + SalesOrder - Sales Order
    # + PartnerFunction - Partner Function
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesOrderPartner(string SalesOrder, string PartnerFunction, map<string|string[]> headers = {}, *GetSalesOrderPartnerQueries queries) returns SalesOrderPartner|error {
        string resourcePath = string `/SalesOrderPartner/${getEncodedUri(SalesOrder)}/${getEncodedUri(PartnerFunction)}`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from SalesOrderPricingElement by key
    #
    # + SalesOrder - Sales Order
    # + PricingProcedureStep - Step Number
    # + PricingProcedureCounter - Condition Counter
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesOrderPricingElement(string SalesOrder, string PricingProcedureStep, string PricingProcedureCounter, map<string|string[]> headers = {}, *GetSalesOrderPricingElementQueries queries) returns SalesOrderPricingElement|error {
        string resourcePath = string `/SalesOrderPricingElement/${getEncodedUri(SalesOrder)}/${getEncodedUri(PricingProcedureStep)}/${getEncodedUri(PricingProcedureCounter)}`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from SalesOrderScheduleLine by key
    #
    # + SalesOrder - Sales Document
    # + SalesOrderItem - Sales Document Item
    # + ScheduleLine - Schedule Line Number
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesOrderScheduleLine(string SalesOrder, string SalesOrderItem, string ScheduleLine, map<string|string[]> headers = {}, *GetSalesOrderScheduleLineQueries queries) returns SalesOrderScheduleLine|error {
        string resourcePath = string `/SalesOrderScheduleLine/${getEncodedUri(SalesOrder)}/${getEncodedUri(SalesOrderItem)}/${getEncodedUri(ScheduleLine)}`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entity from SalesOrderText by key
    #
    # + SalesOrder - Sales Order
    # + Language - Language Key
    # + LongTextID - Text ID
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSalesOrderText(string SalesOrder, string Language, string LongTextID, map<string|string[]> headers = {}, *GetSalesOrderTextQueries queries) returns SalesOrderText|error {
        string resourcePath = string `/SalesOrderText/${getEncodedUri(SalesOrder)}/${getEncodedUri(Language)}/${getEncodedUri(LongTextID)}`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from related _ItemPartner
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listItemPartnersOfSalesOrderItem(string SalesOrder, string SalesOrderItem, map<string|string[]> headers = {}, *ListItemPartnersOfSalesOrderItemQueries queries) returns CollectionOfSalesOrderItemPartner|error {
        string resourcePath = string `/SalesOrderItem/${getEncodedUri(SalesOrder)}/${getEncodedUri(SalesOrderItem)}/_ItemPartner`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from related _ItemPricingElement
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listItemPricingElementsOfSalesOrderItem(string SalesOrder, string SalesOrderItem, map<string|string[]> headers = {}, *ListItemPricingElementsOfSalesOrderItemQueries queries) returns CollectionOfSalesOrderItemPricingElmnt|error {
        string resourcePath = string `/SalesOrderItem/${getEncodedUri(SalesOrder)}/${getEncodedUri(SalesOrderItem)}/_ItemPricingElement`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from related _ItemText
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listItemTextsOfSalesOrderItem(string SalesOrder, string SalesOrderItem, map<string|string[]> headers = {}, *ListItemTextsOfSalesOrderItemQueries queries) returns CollectionOfSalesOrderItemText|error {
        string resourcePath = string `/SalesOrderItem/${getEncodedUri(SalesOrder)}/${getEncodedUri(SalesOrderItem)}/_ItemText`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from related _Item
    #
    # + SalesOrder - Sales Order
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listItemsOfSalesOrder(string SalesOrder, map<string|string[]> headers = {}, *ListItemsOfSalesOrderQueries queries) returns CollectionOfSalesOrderItem|error {
        string resourcePath = string `/SalesOrder/${getEncodedUri(SalesOrder)}/_Item`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from related _Partner
    #
    # + SalesOrder - Sales Order
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPartnersOfSalesOrder(string SalesOrder, map<string|string[]> headers = {}, *ListPartnersOfSalesOrderQueries queries) returns CollectionOfSalesOrderPartner|error {
        string resourcePath = string `/SalesOrder/${getEncodedUri(SalesOrder)}/_Partner`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from related _PricingElement
    #
    # + SalesOrder - Sales Order
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPricingElementsOfSalesOrder(string SalesOrder, map<string|string[]> headers = {}, *ListPricingElementsOfSalesOrderQueries queries) returns CollectionOfSalesOrderPricingElement|error {
        string resourcePath = string `/SalesOrder/${getEncodedUri(SalesOrder)}/_PricingElement`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from SalesOrderItemPartner
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listSalesOrderItemPartners(map<string|string[]> headers = {}, *ListSalesOrderItemPartnersQueries queries) returns CollectionOfSalesOrderItemPartner|error {
        string resourcePath = string `/SalesOrderItemPartner`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from SalesOrderItemPricingElement
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listSalesOrderItemPricingElements(map<string|string[]> headers = {}, *ListSalesOrderItemPricingElementsQueries queries) returns CollectionOfSalesOrderItemPricingElmnt|error {
        string resourcePath = string `/SalesOrderItemPricingElement`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from SalesOrderItemText
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listSalesOrderItemTexts(map<string|string[]> headers = {}, *ListSalesOrderItemTextsQueries queries) returns CollectionOfSalesOrderItemText|error {
        string resourcePath = string `/SalesOrderItemText`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from SalesOrderItem
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listSalesOrderItems(map<string|string[]> headers = {}, *ListSalesOrderItemsQueries queries) returns CollectionOfSalesOrderItem|error {
        string resourcePath = string `/SalesOrderItem`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from SalesOrderPartner
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listSalesOrderPartners(map<string|string[]> headers = {}, *ListSalesOrderPartnersQueries queries) returns CollectionOfSalesOrderPartner|error {
        string resourcePath = string `/SalesOrderPartner`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from SalesOrderPricingElement
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listSalesOrderPricingElements(map<string|string[]> headers = {}, *ListSalesOrderPricingElementsQueries queries) returns CollectionOfSalesOrderPricingElement|error {
        string resourcePath = string `/SalesOrderPricingElement`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from SalesOrderScheduleLine
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listSalesOrderScheduleLines(map<string|string[]> headers = {}, *ListSalesOrderScheduleLinesQueries queries) returns CollectionOfSalesOrderScheduleLine|error {
        string resourcePath = string `/SalesOrderScheduleLine`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from SalesOrderText
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listSalesOrderTexts(map<string|string[]> headers = {}, *ListSalesOrderTextsQueries queries) returns CollectionOfSalesOrderText|error {
        string resourcePath = string `/SalesOrderText`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from SalesOrder
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listSalesOrders(map<string|string[]> headers = {}, *ListSalesOrdersQueries queries) returns CollectionOfSalesOrder|error {
        string resourcePath = string `/SalesOrder`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from related _ScheduleLine
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listScheduleLinesOfSalesOrderItem(string SalesOrder, string SalesOrderItem, map<string|string[]> headers = {}, *ListScheduleLinesOfSalesOrderItemQueries queries) returns CollectionOfSalesOrderScheduleLine|error {
        string resourcePath = string `/SalesOrderItem/${getEncodedUri(SalesOrder)}/${getEncodedUri(SalesOrderItem)}/_ScheduleLine`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get entities from related _Text
    #
    # + SalesOrder - Sales Order
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listTextsOfSalesOrder(string SalesOrder, map<string|string[]> headers = {}, *ListTextsOfSalesOrderQueries queries) returns CollectionOfSalesOrderText|error {
        string resourcePath = string `/SalesOrder/${getEncodedUri(SalesOrder)}/_Text`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update entity in SalesOrder
    #
    # + salesOrder - Sales Order
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchSalesOrder(string salesOrder, UpdateSalesOrder payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/SalesOrder/${getEncodedUri(salesOrder)}`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Update entity in SalesOrderItem
    #
    # + SalesOrder - Sales Order
    # + salesOrderItem - Sales Order Item
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchSalesOrderItem(string SalesOrder, string salesOrderItem, UpdateSalesOrderItem payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/SalesOrderItem/${getEncodedUri(SalesOrder)}/${getEncodedUri(salesOrderItem)}`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Update entity in SalesOrderItemPartner
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + PartnerFunction - Partner Function
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchSalesOrderItemPartner(string SalesOrder, string SalesOrderItem, string PartnerFunction, UpdateSalesOrderItemPartner payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/SalesOrderItemPartner/${getEncodedUri(SalesOrder)}/${getEncodedUri(SalesOrderItem)}/${getEncodedUri(PartnerFunction)}`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Update entity in SalesOrderItemPricingElement
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + PricingProcedureStep - Step Number
    # + PricingProcedureCounter - Condition Counter
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchSalesOrderItemPricingElement(string SalesOrder, string SalesOrderItem, string PricingProcedureStep, string PricingProcedureCounter, UpdateSalesOrderItemPricingElmnt payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/SalesOrderItemPricingElement/${getEncodedUri(SalesOrder)}/${getEncodedUri(SalesOrderItem)}/${getEncodedUri(PricingProcedureStep)}/${getEncodedUri(PricingProcedureCounter)}`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Update entity in SalesOrderItemText
    #
    # + SalesOrder - Sales Order
    # + SalesOrderItem - Sales Order Item
    # + Language - Language Key
    # + LongTextID - Text ID
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchSalesOrderItemText(string SalesOrder, string SalesOrderItem, string Language, string LongTextID, UpdateSalesOrderItemText payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/SalesOrderItemText/${getEncodedUri(SalesOrder)}/${getEncodedUri(SalesOrderItem)}/${getEncodedUri(Language)}/${getEncodedUri(LongTextID)}`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Update entity in SalesOrderPartner
    #
    # + SalesOrder - Sales Order
    # + PartnerFunction - Partner Function
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchSalesOrderPartner(string SalesOrder, string PartnerFunction, UpdateSalesOrderPartner payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/SalesOrderPartner/${getEncodedUri(SalesOrder)}/${getEncodedUri(PartnerFunction)}`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Update entity in SalesOrderPricingElement
    #
    # + SalesOrder - Sales Order
    # + PricingProcedureStep - Step Number
    # + PricingProcedureCounter - Condition Counter
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchSalesOrderPricingElement(string SalesOrder, string PricingProcedureStep, string PricingProcedureCounter, UpdateSalesOrderPricingElement payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/SalesOrderPricingElement/${getEncodedUri(SalesOrder)}/${getEncodedUri(PricingProcedureStep)}/${getEncodedUri(PricingProcedureCounter)}`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Update entity in SalesOrderText
    #
    # + SalesOrder - Sales Order
    # + Language - Language Key
    # + LongTextID - Text ID
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchSalesOrderText(string SalesOrder, string Language, string LongTextID, UpdateSalesOrderText payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/SalesOrderText/${getEncodedUri(SalesOrder)}/${getEncodedUri(Language)}/${getEncodedUri(LongTextID)}`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Send a group of requests
    #
    # + headers - Headers to be sent with the request 
    # + request - Batch request 
    # + return - Batch response 
    remote isolated function performBatchOperation(http:Request request, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/$batch`;
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, headers);
    }
}
